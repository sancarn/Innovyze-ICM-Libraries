[html]
    <script>
        //  <div style="float:right;background-color:#ffdddd;border-radius:5px;border:5px solid #ffdddd;"><b>Exchange</b></div>
        //  <div style="float:right;background-color:#aaaaaa;border-radius:5px;border:5px solid #aaaaaa;"><b>v6.5.1</b></div>
        //  <div style="float:right;background-color:#ddffdd;border-radius:5px;border:5px solid #ddffdd;"><b>Official</b></div>
    </script>
    <style>
'    <div class="docAppType" style="float:right;background-color:#aaaaaa;border-radius:5px;border:5px solid #aaaaaa;"><b>432364246</b></div>' + "\n" +
'    <div class="docDocType" style="float:right;background-color:#ddffdd;border-radius:5px;border:5px solid #ddffdd;"><b>229633707</b></div>' + "\n" +
        .body {
            position:relative;
        }
        .docVersion {
            float:right;
            background-color:#ffdddd;
            border-radius:5px;
            border:5px solid #ffdddd;
        }
        .docAppType {

        }
        .docDocType {

        }
    </style>
[/html]

# InfoWorks ICM API Reference
    `## DISCLAIMER

        [styler style="color:red;"]
            [b]
                This documentation is community maintained and we cannot guarantee the information in this document is correct.
                The presence of a class or method in this document does not guarantee it will exist and/or work as described,
                or in the version specified. If you would like to contribute to the documentation see [link url=""]contributing[/link].
            [/b]
        [/styler]

    ## WSApplication

        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
                ### `add_ons_folder`

                    `#### Syntax:

                        ```ruby
                            s=WSApplication.add_ons_folder
                        ```

                    `#### Description:

                        Returns the full path of the 'add ons' folder described in Appendix 3 e.g.`
            			`
                        `C:\\Users\\badgerb\\AppData\\Roaming\\Innovyze\\WorkgroupClient\\scripts``
            			`
                        > Note - This folder will not exist unless manually created. Its parent folder will exist if InfoNet/InfoWorks has been opened on this PC.`

                        `
            `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ### `background_network`

                `#### Syntax:

                    ```ruby
                        bn=WSApplication.background_network
                    ```

                `#### Description:

                    Returns the background network for the GeoPlan that currently has focus. Scripts may
                    only work on current and background networks in the UI mode. The background network may,
                    of course, be nil if no background network is loaded.

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ### `cancel_job`

                `#### Syntax:

                    ```ruby
                        WSApplication.cancel_job(job)
                    ```

                `#### Description:

                    Cancels a job being run by the agent. The parameter is a job ID from the
                    array returned by launch\_sims – see below.

        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ### `colour`

                `#### Syntax:

                    ```ruby
                        col=WSApplication.colour(r,g,b)
                    ```

                `#### Description:

                    This method exists for convenience in the context of the graph method
                    described below. Given 3 parameters, r, g and b from 0 to 255 returns a
                    colour with those red, green and blue values e.g. colour(0,0,0) returns
                    black, colour(255,0,0) returns red, colour(255,255,255) returns white.

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`connect_local_agent`

                `#### Syntax:

                    ```ruby
                        bSuccess=WSApplication.connect_local_agent(wait_time)
                    ```

                `#### Description:

                    Connects to the local agent, returning true if it succeeds. The call
                    waits for a number of milliseconds specified in the parameter.`
                    `
                    This method must be called before the `launch_sims` method is called.

        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ###`current_database`

                `#### Syntax:

                    ```ruby
                        db=WSApplication.current_database
                    ```

                `#### Description:

                    Returns the current database. Only very limited database functionality
                    is available from Ruby scripting from within the UI. This method is used
                    to return the database object for the currently open master database.

        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ###`current_network`

                `#### Syntax:

                    ```ruby
                        on=WSApplication.current_network
                    ```

                `#### Description:

                    Returns the network for the GeoPlan that currently has focus. Scripts
                    may only work on the current network (and background networks) in the UI
                    mode.`
					`
                    If a Ruby script is run in the UI when the current network has results
                    then the results will be available to the script.

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`create`

                `#### Syntax:

                    ```ruby
                        WSApplication.create(path)
                    ```

                `#### Example:

                    ```ruby
                        WSApplication.create 'd:\\temp\\1.icmm'
                    ```

                `#### Description:

                    Creates a standard database at the location given by the path parameter.`
					`
                    Likely exceptions for this method to throw are the following:
						RuntimeExceptions:
							`Error 43 : Can't overwrite an existing database z:\\test.icmm contains an incorrect path`
							
        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`create_transportable

                `#### Syntax:

                    ```ruby
                        WSApplication.create_transportable(path)
                    ```

                `#### Description:


                    Creates a transportable database at the location given by the path
                    parameter.

        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ###`file_dialog`

                `#### Syntax:

                    ```ruby
                        file_or_files=WSApplication.file_dialog(open, extension,description, default_name,allow_multiple_files,hard_wire_cancel)
                    ```

                `#### Description:


                    Displays a file dialog (open or save), and if OK is selected returns the
                    file path, or if allow\_multiple\_files was set to true, an array of
                    selected files.`
                    `
                    The parameters are as follows:`
                    `
                    open – true if the dialog is to be an 'open' dialog (i.e. to select an
                    existing file to be read subsequently in the Ruby script), false if it
                    is to be a 'save' dialog (i.e. to select the name of a file to be
                    written subsequently in the Ruby script)`
                    `
                    extension – the extension of the file e.g. 'csv', 'dat', 'xml'.
                    `
                    Description – a description of the type of file to save which will
                    appear in the file dialog e.g. 'Comma Separated Value file'.`
                    `
                    Default name – a default name to save the file (if open is false), or a
                    default name to search for (if open is true).`
                    `
                    Allow multiple files – true if open is false and you wish to allow more
                    than one file to be selected. The parameter is ignored if open is true.`
                    `
                    The method returns the path of the file chosen as a string, unless open
                    is true and allow\_multiple\_files is true, in which case an array of
                    strings is returned.`
                    `
                    Hard-wire cancel – if this parameter is true or nil, if the user cancels
                    from the dialog, the execution of the Ruby script is stopped.`

        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ###`folder_dialog`

                `#### Syntax:

                    ```ruby
                        folder=WSApplication.folder_dialog(title,hard_wire_cancel)
                    ```

                `#### Description:


                    Displays a dialog allowing the selection of a folder, returned as a
                    string.`
                    `
                    The parameters are as follows:`
                    `
                    Title – a title for the dialog`
                    `
                    Hard-wire cancel – if the parameter is true or nil, if the user cancels
                    from the dialog, the execution of the Ruby script is stopped.`
                    `
                    If the user selects OK, the path of the folder is returned as a string.
                    If the user selects cancel and the hard\_wire\_cancel parameter is set
                    to false, nil will be returned.`

        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ###`graph`

                `#### Syntax:

                    ```ruby
                        WSApplication.graph(params)
                    ```

                    Example:

                    ```ruby
                        graphs = {
                            "WindowTitle" => "My awesome traces",
                            "GraphTitle"  => "My cool trace",
                            "XAxisLabel"  => "Cool X-Axis",
                            "YAxisLabel"  => "Cool Y-Axis",
                            "IsTime"      => false
                            "Traces"      => [
                                {
                                    "Title"        => "x^2 graph",
                                    "TraceColour"  => 0,
                                    "SymbolColour" => 0,
                                    "Marker"       => "Circle",
                                    "LineType"     => "Solid",
                                    XArray         => [1,2,3,4,5,6,7,8,9,10],
                                    YArray         => [1,4,9,16,25,36,49,64,81,100]
                                },
                                {
                                    "Title"        => "x^3 graph",
                                    "TraceColour"  => 255,
                                    "SymbolColour" => 255,
                                    "Marker"       => "Circle",
                                    "LineType"     => "Solid",
                                    XArray         => [1,2,3,4,5,6,7,8,9,10],
                                    YArray         => [1,8,27,64,125,216,343,512,729,1000]
                                }
                            ]
                        }
                        WSApplication.graph(graphs)
                    ```

                `#### Description:

                    Displays a graph according to the parameters passed in.`
                    `
                    The graph method contains 1 parameter, a hash.
                    `
                    It has the following keys, which are all strings:
                    `
					[table]
						[header]
							[column]Key[/column]
							[column]Type[/column]
							[column]Description[/column]
						[/header]
						[row]
							[column]WindowTitle[/column]
							[column]`rb String`[/column]
							[column]The title of the graph window[/column]
						[/row]
						[row]
						    [column]GraphTitle[/column]
						    [column]`rb String`[/column]
						    [column]The title of the graph (i.e. this appears IN the window rather than being the title)[/column]
						[/row]
						[row]
							[column]XAxisLabel[/column]
							[column]`rb String`[/column]
							[column]The label of the X-axis[/column]
						[/row]
						[row]
							[column]YAxisLabel[/column]
							[column]`rb String`[/column]
							[column]The label of the Y-axis[/column]
						[/row]
						[row]
							[column]IsTime[/column]
							[column]`rb Boolean`[/column]
							[column]Set this field to true if the x axis is made up of time values and is labelled as dates / times.[/column]
						[/row]
						[row]
							[column]Traces[/column]
							[column]`rb Array`[/column]
							[column]An array of traces (see below for more details).[/column]
						[/row]
					[/table]
                    
					`##### Trace
					
					A trace is a Hash which contains data about about the style and position of data within the graph.
					The keys and values of the Hash are described in the table below:`
					`
					[table]
						[header]
							[column]Key[/column]
							[column]Type[/column]
							[column]Description[/column]
						[/header]
						[row]
							[column]Title[/column]
							[column]`rb String`[/column]
							[column]The name of the dataset.[/column]
						[/row]
						[row]
						    [column]TraceColour[/column]
						    [column]`rb Integer`[/column]
						    [column]An RGB value of the trace's colour. A convenient way of getting this is to use the 
							        WSApplicatioon.colour method[/column]
						[/row]
						[row]
						    [column]SymbolColour[/column]
						    [column]`rb Integer`[/column]
						    [column]An RGB value of the symbol colour. A convenient way of getting this is to use the 
							        WSApplicatioon.colour method[/column]
						[/row]
						[row]
							[column]Marker[/column]
							[column]`rb String`[/column]
							[column]
								The symbol to be used for the points along the trace. Possible options:
								[table]
								    [header][column]Key     [/column][column]Description     [/column][/header]
									[row][column]None     [/column][column]No symbol will be used.[/column][/row]
									[row][column]Cross    [/column][column]Shaped like a plus (+).[/column][/row]
									[row][column]XCross   [/column][column]Shaped like an x.[/column][/row]
									[row][column]Star     [/column][column]Shaped like a star.     [/column][/row]
									[row][column]Circle   [/column][column]Shaped like a circle.   [/column][/row]
									[row][column]Triangle [/column][column]Shaped like a triangle. [/column][/row]
									[row][column]Diamond  [/column][column]Shaped like a diamond.  [/column][/row]
									[row][column]Square   [/column][column]Shaped like a square.   [/column][/row]
									[row][column]FCircle  [/column][column]Same as `Circle`, but filled instead of empty.  [/column][/row]
									[row][column]FTriangle[/column][column]Same as `Triangle`, but filled instead of empty.[/column][/row]
									[row][column]FDiamond [/column][column]Same as `Diamond`, but filled instead of empty. [/column][/row]
									[row][column]FSquare  [/column][column]Same as `Square`, but filled instead of empty.  [/column][/row]
								[/table]
							[/column]
						[/row]
						[row]
							[column]LineType[/column]
							[column]`rb String`[/column]
							[column]
								The style to be used for the trace's line.
								[table]
									[row][column]None      [/column][/row]
									[row][column]Solid     [/column][/row]
									[row][column]Dash      [/column][/row]
									[row][column]Dot       [/column][/row]
									[row][column]DashDot   [/column][/row]
									[row][column]DashDotDot[/column][/row]
								[/table]
							[/column]
						[/row]
						[row]
							[column]XArray[/column]
							[column]`rb Array`[/column]
							[column]
								The values used in the trace for the x coordinates of the points. They 
								must be floating point values (or values that can be converted to a
								floating point values) if IsTime is false or time values if IsTime is true.
							[/column]
						[/row]
						[row]
							[column]YArray[/column]
							[column]`rb Array`[/column]
							[column]
								The values used in the trace for the y coordinates of the points. They
								must be floating point values (or values that can be converted to a 
								floating point values) if IsTime is false or time values if IsTime is true.
							[/column]
						[/row]
					[/table]
					`
                    > There must be an equal number of values in the XArray and YArray in each
                    trace, though they can vary between traces.
        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ###`input_box`

                `#### Syntax:

                    ```ruby
                        s=WSApplication.input_box(prompt,title,default)
                    ```

                `#### Description:


                    Displays a box allowing the input of a text value. The prompt appears on
                    the dialog, the title appears as the dialog title, unless it is nil or
                    the empty string in which case a default title appears. The text field
                    is initially set to the 'default' parameter. If the user hits OK, the
                    value in the text field is returned, otherwise the empty string is
                    returned.

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`launch_sims`

                `#### Syntax:

                    ```ruby
                        arr=WSApplication.launch_sims(sims, server, results_on_server,
                        max_threads, after)
                    ```

                `#### Description:


                    Launches one or more simulations in a flexible way. This method requires
                    `connect_local_agent` to have been called prior to its being called.`
					`
                    The parameters are as follows:`
					`
                    > Sims – an array of WSModelObject objects for the simulations
                    >
                    > Server – the name of the server to run the simulation on, or '.' for
                    > the local machine or '\*' for any computer.
                    >
                    > Results\_on\_server – Boolean
                    >
                    > Max\_threads – the maximum number of threads to use for this
                    > simulation (or 0 to allow the simulation agent to choose)
                    >
                    > After – the time (as a time\_t time) after which the simulation should
                    > run, or 0 for 'now'.
					`
                    The method returns an array of 'job IDs', one for each simulation in the
                    sims array, the ID of a given simulation will be nil if the simulation
                    failed to launch. The job IDs are strings intended for use as parameters
                    to the wait\_for\_jobs method and the cancel\_job method. Any nil values
                    in the array will be safely ignored by the wait\_for\_jobs method so the
                    results array may be passed into it.`

        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ###`message_box`

                `#### Syntax:

                    ```ruby
                        text=WSApplication.message_box(text,options,icon,hard_wire_cancel)
                    ```

                `#### Description:

                    Displays a message box.`
					`
					The method returns 'Yes','No','OK' or 'Cancel' as a string. If hard_wire_cancel is
					false or nil, the ruby script is halted and nothing is returned.`
					`
                    The parameters are as follows:`
					`
                    [table]
						[header]
							[column]Parameter name[/column]
							[column]Parameter type[/column]
							[column]Parameter description[/column]
						[/header]
						[row]
							[column]Text[/column]
							[column]`rb String`[/column]
							[column]The text displayed[/column]
						[/row]
						[row]
							[column]Options[/column]
							[column]`rb String` or `rb nil`[/column]
							[column]
								The options are as follows:
								[table]
									[header]
										[column]Option name[/column]
										[column]Option description[/column]
									[/header]
									[row]
										[column]`rb nil`[/column]
										[column]
											Alias for OKCancel
										[/column]
									[/row]
									[row]
										[column]`rb "OK"`[/column]
										[column]
											[[ image7.png
											[img width=241 height=161]media/WSApplication_Message_Box_OK.png[/img]`
										[/column]
									[/row]
									[row]
										[column]`rb "OKCancel"`[/column]
										[column]
											[[ image8.png
											[img width=241 height=161]media/WSApplication_Message_Box_OKCancel.png[/img]
										[/column]
									[/row]
									[row]
										[column]`rb "YesNo"`[/column]
										[column]
											[[ image9.png
											[img width=241 height=161]media/WSApplication_Message_Box_YesNo.png[/img]
										[/column]
									[/row]
									[row]
										[column]`rb "YesNoCancel"`[/column]
										[column]
											[[ image10.png
											[img width=241 height=161]media/WSApplication_Message_Box_YesNoCancel.png[/img]
										[/column]
									[/row]
								[/table]
							[/column]
						[/row]
						[row]
							[column]Icon[/column]
							[column]`rb String`[/column]
							[column]
								The icon displayed in the message box.`
								`
								[table]
									[header]
										[column]Icon Value[/column]
										[column]Icon Displayed[/column]
									[/header]
									[row]
										[column]`rb nil`[/column]
										[column]
											Alias for `rb "!"`.
										[/column]
									[/row]
									[row]
										[column]`rb "!"`[/column]
										[column]
											[[ image3.png
											[img width=241 height=161]media/WSApplication_Message_Box_Exclamation.png[/img]
										[/column]
									[/row]
									[row]
										[column]`rb "?"`[/column]
										[column]
											[[ image4.png
											[img width=241 height=161]media/WSApplication_Message_Box_Question.png[/img]
										[/column]
									[/row]
									[row]
										[column]`rb "Information"`[/column]
										[column]
											[[ image5.png
											[img width=241 height=161]media/WSApplication_Message_Box_Information.png[/img]
										[/column]
									[/row]
									[row]
										[column]`rb "Stop"`[/column]
										[column]
											[[ image6.png
											[img width=241 height=161]media/WSApplication_Message_Box_Critical.png[/img]
										[/column]
									[/row]
								[/table]
							[/column]
						[/row]
						[row]
							[column]hard_wire_cancel[/column]
							[column]`rb Boolean`[/column]
							[column]
								Whether the script should stop processing if the 'Cancel' button is hit.`
								`
								If this value is set to true or nil then hitting the cancel button (if there is one),
								or quitting the dialog, will result in the Ruby script halting. If this value is false,
								the ruby script will continue regardless of the user's interaction with the cancel
								button.
							[/column]
						[/row]
					[/table]
        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`open`

                `#### Syntax:

                    ```ruby
                        iwdb=WSApplication.open(path,bUpdate)
                    ```

                `#### Example:

                    ```ruby
                        db=WSApplication.open 'd:\\temp\\1.icmm',false
                        db.open nil,false
                    ```

                `#### Description:

                    Opens the database with path 'path' and returns an object of type
                    WSDatabase. If the database requires updating and the flag bUpdate
                    evaluates to true then the database will be updated (if possible)
                    otherwise the call will fail`
                    `
                    If the path is blank then uses the current master database, if any.`
                    `
                    Likely exceptions for this method to throw are:`
                    `
                    Error 13 : File Not Found : d:\\temp\\misc.icmm (error=2: "The system
                    cannot find the file specified.")`
                    `
                    if the database is not present.`
                    `
                    Error 13 : File Not Found : z:\\misc.icmm (error=3: "The system cannot
                    find the path specified.")`
                    `
                    if the database path is invalid`
                    `
                    no database path specified`
                    `
                    if the path is nil and there is no currently selected master database
                    via the UI`
                    `
                    major update failed`
                    `
                    minor update failed`
                    `
                    if there is a problem with a database update`
                    `
                    database requires major update but allow update flag is not set`
                    `
                    database requires minor update but allow update flag is not set`
                    `
                    if the database requires an update but the second parameter is false`

        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ###`open_text_view`

                `#### Syntax:

                    ```ruby
                        WSApplication.open_text_view(title,filename,delete_on_exit)
                    ```

                `#### Description:


                    This method opens a text file in a text view within the application. The
                    parameters are a window title, the filename and a Boolean, which if set
                    to true, will cause the file to be deleted when the view is closed.`
                    `
                    It is important to realise that this method does not cause the script to
                    wait until the file is closed – it opens the view and then continues to
                    the next item in the script.`
                    `
                    The purpose of the delete\_on\_exit parameter is allow the user to
                    create a temporary file which will be displayed by this method and then
                    deleted when the view is closed by the user.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`override_user_unit (Exchange only – see note in method text)`

                `#### Syntax:

                    ```ruby
                        OK=WSApplication.override_user_unit(code,value)
                    ```

                `#### Example:

                    ```ruby
                        OK=WSApplication.override_user_unit 'X','ft'
                    ```

                `#### Description:

                    Overrides a current user unit for the duration of the script`
                    `
                    This can be useful where ICM Exchange is running as a service, where the
                    "user" has no settings of it own and you don't want the default user
                    units that are selected for the locale`
                    `
                    Returns `true` if successful, `false` for an unknown unit or value.`
                    `
                    > Note – When scripts are run from the UI, user units are always used.

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`override_user_units`

                `#### Syntax:

                    ```ruby
                        errs=WSApplication.override_user_units(filename)
                    ```

                `#### Example:

                    ```ruby
                        errs=WSApplication.override_user_units 'd:\\temp\\uu.csv'
                        if errs.length<0
                            puts “error reading CSV file”
                        end
                    ```

                `#### Description:

                    Bulk overrides the current user units for the duration of the script.`
                    `
                    Takes a filename of a file containing comma separated pairs of unit
                    code, unit value pairs, one pair per line. E.g.`
                    `
                    XY,US Survey ft`
                    `
                    Useful where ICM Exchange is running as a service, where the "user" has
                    no settings of it own.`
                    `
                    Returns an error string. An empty string indicates success. Note,
                    however, that any valid units will be applied, regardless of whether
                    there are any errors with other lines of the file.`
                    `
                    A likely exception for this method to throw is:`
                    `
                    Error 13 : File Not Found : z:\\uu.csv (error=3: "The system cannot find
                    the path specified.")`
                    `
                    if the file does not exist.`

        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ###`prompt`

                `#### Syntax:

                    ```ruby
                        arr=WSApplication.prompt(title,layout,hard_wire_cancel)
                    ```

                `#### Description:


                    This method displays a prompt grid, similar to that used in the SQL in
                    InfoWorks ICM / InfoNet. It displays values and allows users to edit
                    them.`
                    `
                    Title – the title of the displayed dialog.`
                    `
                    Layout – an array of arrays as described below.`
                    `
                    Hard-wire cancel – if this is set to true or nil, if the user hits
                    cancel, the running of the Ruby script is interrupted.`
                    `
                    The method returns an array of values, one for each line in the dialog.`
                    `
                    The layout parameter must be an array consisting of one array for each
                    line to be displayed.`
                    `
                    The array for each line must contain between 2 and 9 values as follows:`
                    `
                    Index 0 – a string to display as a description of the value for the row`
                    `
                    Index 1 – a type of the value – one of the following strings:`
                    `
                    > NUMBER – a number
                    >
                    > STRING- a string
                    >
                    > DATE – a date (as a Ruby DateTime object)
                    >
                    > BOOLEAN – a Boolean value, appearing in the edit column as a check-box
                    >
                    > READONLY – a read only value, appearing in the edit column as a string
                    > with a grey background. The value is converted to a string except for
                    > Ruby types float and double.
                    `
                    Index 2 (optional, except for rows of read only type) – a default value
                    i.e. the initial value when the dialog appears. For read only rows, this
                    is the value displayed which cannot, of course, be changed`
                    `
                    Index 3 (optional) a number of decimal places – used for numbers and
                    read only values of Ruby types float and double.`
                    `
                    Index 4 (optional) a subtype – one of the following strings`
                    `
                    > RANGE – valid for NUMBER only, the value will be chosen from a combo
                    > box with values specified in array elements index 5 and 6 inclusive.
                    >
                    > LIST – valid for NUMBER, STRING and DATE only. The value will be
                    > chosen from a combo box of values supplied as an array in array
                    > element 5.
                    >
                    > MONTH – valid for NUMBER only, the value will be chosen from a
                    > combobox containing the names of the months.
                    >
                    > FILE – valid for STRING only, the value will be chosen by pressing a
                    > button and selecting one or more filenames via a file dialog, the
                    > precise details of which will be determined by array elements with
                    > indices 5, 6, 7 and 8 as follows:
                    >
                    > Index 5 – Boolean – true for an 'open' dialog, false for a 'save'
                    > dialog
                    >
                    > Index 6 – String – the file extension
                    >
                    > Index 7 – String – a description of the file type
                    >
                    > Index 8 – Boolean – true to allow the selection of multiple files if
                    > index 5 is set to true giving an 'open' dialog, ignored otherwise
                    >
                    > FOLDER – valid for STRING only, the value will be chosen by pressing a
                    > button and selecting a folder. Array element 6 must be a folder
                    > description as a string or nil, in which case a default title will be
                    > used.
                    `
                    Here is an example of a prompt exercising most of these options:`
                    `
                    ```rb
                        require 'Date'
                        val=WSApplication.prompt "Badger", [
                            ['This is a number','NUMBER'],
                            ['This is a string','String'],
                            ['This is a date','Date'],
                            ['This is a date with default','Date',DateTime.new(2012,7,13,12,45,00)],
                            ['This is a number With 4 DP','Number',234.123456,4],
                            ['This is a month','Number',11,nil,'MONTH'],
                            ['This is a range','Number',13,2,'RANGE',100,200],
                            ['String with default','String','Badger'],
                            ['List','String','Default',nil,'LIST',['Alpha','Beta','Gamma']],
                            ['List of numbers, no default','Number',nil,nil,'LIST',[3,5,7,11]],
                            ['List of numbers, with default','Number',23,nil,'LIST',[13,17,19,23]],
                            ['List of dates, no    default','Date',nil,nil,'LIST',[DateTime.new(2012,7,13,12,45,00),DateTime.new(2012,7,17,13,15,00),DateTime.new(2012,7, 10,17,15,00)]],
                            ['List of dates, with default','Date',DateTime.new(2011,10,13,14,12,30),nil,'LIST',[DateTime.new(2012,7,13,12,45,00),DateTime.new(2012,7,17, 13,15,00),DateTime.new(2012,7,10,17,15,00)]],
                            ['This is a bool','Boolean'],
                            ['This is a false bool','Boolean',false],
                            ['This is a true bool','Boolean',true],
                            ['File save','String','Badger.dat',nil,'FILE',false,'dat','Data file',false],
                            ['File load single','String',nil,nil,'FILE',true,'dat','MySystem data file',false],
                            ['File load multiple','String',nil,nil,'FILE',true,'dat','More than one MySystem data file',true],
                            ['This is a folder','String',nil,nil,'FOLDER','Name of MyFolder'],
                            ['Read Only String','Readonly','Turbo Pump'],
                            ['Read Only Number','Readonly',12.3456678],
                            ['Read only number 6 dp','ReadOnly',87.65456789,6]
                        ],false
                        puts val.to_s
                    ```
                    `
                    When run, it looks like this:`
                    `
                    [img width="448" height="315"]media/image11.png[/img]
                    `
                    As you can see, there are a number of lists (with the button for the
                    pull down to the right), and a number of filenames (with a button
                    showing ellipses to press to invoke the file or folder dialog).`
                    `
                    The read only values are showed greyed out, in this example the rows are
                    ordered so they appear at the bottom of the grid.`
                    `
                    Notice that the date time values in the lists and for defaults are set
                    using DateTime.new as described earlier in this document.`
                    `
                    If OK is hit without changing any values, it returns an array like this:`
                    `
                    ```ruby
                        [nil, nil, nil, #<DateTime: 2012-07-13T12:45:00+00:00 (78595905/32,0,2299161)>, 234.123456, 11.0, 100.0, "Badger",
                        "Default", nil, 23.0, nil, #<DateTime: 2011-10-13T14:12:30+00:00 (1414568501/576,0,2299161)>, false, false, true, "Badger.dat", nil, nil, nil, "Turbo Pump", 12.3456678, 87.65456789]
                    ```

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`results_folder`

                `#### Syntax:

                    ```ruby
                        s=WSApplication.results_folder
                    ```

                `#### Example:

                    ```rb
                        puts WSApplication.results_folder
                    ```

                `#### Description:

                    Returns the current results folder as a string`
                    `
                    NB – if you have not specified a results folder, either in a script or
                    in the UI, the default results folder which is used will be returned
                    i.e. this returns the results folder that is actually being used
                    regardless of whether you have explicitly set it or not.`

        `
        `
        [/method]
        [method exchange=false ui=true documentation="official" icmVersion="1.6.6"]

            ###`scalars`

                `#### Syntax:

                    ```ruby
                        WSApplication.scalars(title,layout,hard_wire_cancel)
                    ```

                `#### Description:


                    This method displays a grid of values, similar to that used in the SQL
                    in InfoWorks ICM / InfoNet.`
                    `
                    The parameters are as follows:`
                    `
                    Title – the title of the displayed dialog.`
                    `
                    Layout – an array of arrays as described below.`
                    `
                    Hard-wire cancel – if this is set to true or nil, if the user hits
                    cancel, the running of the Ruby script is interrupted.`
                    `
                    The layout parameter must be an array consisting of one array for each
                    line to be displayed.`
                    `
                    The array for each line must contain 2 or 3 values as follows:`
                    `
                    Index 0 – a string to display as the description of the value for the
                    row`
                    `
                    Index 1 – the value to be displayed as a Ruby value. If the value is a
                    float or a double it will be displayed by using the Ruby to\_f method,
                    otherwise the to\_s method will be used.`
                    `
                    Index 2 (optional) – a number of decimal places to be used between 0 and
                    8 inclusive, this will be used for float and double values and ignored
                    for any others.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`script_file`

                `#### Syntax:

                    ```ruby
                        s=WSApplication.script_file
                    ```

                `#### Description:


                    Returns the full path of the script file. This will either by the file
                    specified on the command line of the Exchange product or the file
                    selected in the user interface.`
                    `
                    This method is supplied primarily to obtain the script's path in order
                    to process the path to get the paths of files in the same directory e.g.
                    config files for the Open Data Import and Export Centers.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`set_exit_code`

                `#### Syntax:

                    ```ruby
                        WSApplication.set_exit_code(exit_code)
                    ```

                `#### Example:

                    ```ruby
                        WSApplication.set_exit_code 12
                    ```

                `#### Description:

                    Sets the InfoLite application's exit code. The exit code must evaluate
                    to a Fixnum, if it does not, an exception will be thrown:`
                    `
                    exit code is not a number`
                    `
                    > Note - Calling this method *does not* cause the script to terminate,
                    it merely sets the exit code returned to the operating system when the
                    script *does* terminate.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`set_working_folder`

                `#### Syntax:

                    ```ruby
                        WSApplication.set_working_folder(path)
                    ```

                `#### Example:

                    ```rb
                        WSApplication.set_working_folder 'd:\\temp\\wf'
                    ```

                `#### Description:

                    Sets the working folder.`
                    `
                    NB – this working folder will be used for the duration of this ICM
                    Exchange run. it will not be stored in the registry and will not be used
                    by any other instances of ICM Exchange or the ICM UI.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`set_results_folder`

                `#### Syntax:

                    ```rb
                        WSApplication.set_results_folder(path)
                    ```

                `#### Example:

                    ```rb
                        WSApplication.set_results_folder 'd:\\temp\\rf'
                    ```

                `#### Description:

                    Sets the results folder.`
                    `
                    NB – this results folder will be used for the duration of this ICM
                    Exchange run. it will not be stored in the registry and will not be used
                    by any other instances of ICM Exchange or the ICM UI.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`wait_for_jobs`

                `#### Syntax:

                    ```ruby
                        id_or_nil=WSApplication.wait_for_jobs(array_of_job_ids,wait_for_all,timeout)
                    ```

                `#### Description:


                    Waits for one or all of the jobs in the array to complete, or for the
                    timeout time to be reached.`
                    `
                    The parameters are as follows:`
                    `
                    `Array_of_job_ids` – an array of job IDs, i.e. values in the array
                    returned by launch\_sims. This array may contain nil values which are
                    safely ignored.`
                    `
                    `Wait_for_all` – true to wait until all the jobs in the array complete,
                    false to wait for one.`
                    `
                    Timeout – a timeout time in milliseconds.`
                    `
                    Returns Qnil if waittime is exceeded, otherwise returns the array index
                    of the job that caused the wait to end (if waitall is true, this is the
                    last job to complete)`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`ui?`

                `#### Syntax:

                    ```ruby
                        b=WSApplication.ui?
                    ```

                `#### Description:

                    Returns true in interactive mode, false otherwise. The purpose of this
                    method is to allow Ruby code to be written which does different things
                    when run from within the user interface and when run from InfoWorks ICM
                    / InfoNet Exchange.
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`use_arcgis_desktop_licence (Exchange only – see note in method
                    text)`

                `#### Syntax:

                    ```rb
                        WSApplication.use_arcgis_desktop_licence
                    ```

                    When using the open data import and export centre methods with ArcGIS
                    the software uses an ArcGIS server licence type by default. Use this
                    method to use an ArcGIS desktop licence instead. It is the
                    responsibility of the user to choose an appropriate ArcGIS licence based
                    on their use of the software.`
                    `
                    Note – when scripts are run from the UI, the desktop licence is, of
                    course, used.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`use_user_units?`

                `#### Syntax:

                    ```ruby
                        b=WSApplications.use_user_units
                    ```

                `#### Example:

                    ```rb
                        puts WSApplication.use_user_units?
                    ```

                `#### Description:

                    Returns a Boolean indicating whether the application is using user units
                    (default is false for the Exchange products and true within the user
                    interface).`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`use_user_units=`

                `#### Syntax:

                    ```ruby
                        WSApplication.use_user_units = flag
                    ```

                `#### Example:

                    ```rb
                        WSApplication.use_user_units=true
                    ```

                `#### Description:

                    Sets the flag indicating whether the application is using user units.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`use_utf8?`

                `#### Syntax:

                    ```ruby
                        b=WSApplications.use_utf8?
                    ```

                `#### Example:

                    ```rb
                        puts WSApplication.use_utf8?
                    ```

                `#### Description:

                    Returns a Boolean indicating whether the application is using UTF8 in
                    string handling (default is false). See appendix 5 for more details.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`use_utf8=`

                `#### Syntax:

                    ```ruby
                        WSApplication.use_utf8 = flag
                    ```

                `#### Example:

                    ```rb
                        WSApplication.use_utf8=true
                    ```

                `#### Description:

                    Sets the flag indicating whether the application is using UTF8 in string
                    handling (default is false). See appendix 5 for more details.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`version`

                `#### Syntax:

                    ```ruby
                        s=WSApplication.version
                    ```

                `#### Example:

                    ```rb
                        puts WSApplication.version
                    ```

                `#### Description:

                    Returns the InfoWorks ICM version number as a string e.g.`
                    `
                    `rb "2.5.0.5001"`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`working_folder`

                `#### Syntax:

                    ```ruby
                        s=WSApplication.working_folder
                    ```

                `#### Example:

                    ```rb
                        puts WSApplication.working_folder
                    ```

                `#### Description:

                    Returns the current working folder as a string`
                    `
                    NB – if you have not specified a working folder, either in a script or
                    in the UI, the default working folder which is used will be returned
                    i.e. this returns the working folder that is actually being used
                    regardless of whether you have explicitly set it or not`

        `
        `
        [/method]
		`
		`
        ## WSDatabase

            The majority of these methods are only available in the Exchange
            products. The primary purpose of the methods that ARE permitted is to
            allow navigation of the database in order to find and create selection
            list objects.

        `
        `

        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`copy_into_root`

                `#### Syntax:

                    ```ruby
                        mo=iwdb.copy_into_root object,bCopySims,bCopyGroundModels
                    ```

                `#### Description:


                    Given a model object (typically from another database) copies it into
                    the database in the root, returning the new model object. The bCopySims
                    and bCopyGroundModels parameters determine whether or not simulation
                    results and ground models respectively are copied, corresponding to the
                    equivalent user interface options.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`file_root`

                `#### Syntax:

                    ```ruby
                        s=iwdb.file_root
                    ```

                `#### Description:


                    Returns the root used for GIS files for the database – i.e. the path
                    within which GIS file names will be treated as having relative paths.
                    This will be the path shown in the UI as 'Remote files root' when the
                    user selects the 'Select remote roots…' option.`
                    `
                    If the database is a standalone database and the check-box is checked to
                    force the roots to be below the master database, then the path returned
                    will be the one used by the software in this situation i.e. the folder
                    containing the master database.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`find_model_object`

                `#### Syntax:

                    ```ruby
                        mo=iwdb.find_model_object(type,name)
                    ```

                `#### Example:

                    ```rb
                        puts iwdb.find_model_object('Model Network','MyNetwork')
                    ```

                `#### Description:

                    Given the scripting type of an object and a name of a version controlled
                    object (not its scripting path), will return the model object in the
                    database of that type with that name. The name should not be the
                    scripting full path, just the name of the object.`
                    `
                    This method only works for version controlled objects and takes
                    advantage of the fact that version controlled objects have unique names
                    so the name, rather than scripting full path is enough to identify the
                    object in the database uniquely.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`find_root_model_object`

                `#### Syntax:

                    ```ruby
                        mo=iwdb.find_root_model_object(type,name)
                    ```

                `#### Example:

                    ```rb
                        mo=iwdb.find_root_model_object('Master Group','My Master Group')
                    ```

                `#### Description:

                    Given the scripting type of an object and the name of an object, will
                    return the model object with that name in the root of the database.
                    Currently the only object types found in the root of the database are
                    'Master Group', 'Model Group' and 'Asset Group'`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`guid`

                `#### Syntax:

                    ```ruby
                        s=iwdb.guid
                    ```

                `#### Description:


                    Returns the GUID for the database, otherwise known as the 'database
                    identifier'.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`list_read_write_run_fields`

                `#### Syntax:

                    ```ruby
                        arr=iwdb.list_read_write_run_fields
                    ```

                `#### Example:

                    ```rb
                        iwdb.list_read_write_run_fields {|fn| puts fn}
                    ```

                `#### Description:

                    Returns an array of strings containing all the fields in the Run object
                    that are read-write fields i.e. may be set from ICM Exchange scripts.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`model_object`

                `#### Syntax:

                    ```ruby
                        mo=iwdb.model_object(scripting_path)
                    ```

                `#### Example:

                    ```ruby
                        mo=iwdb.model_object('>MODG~My Root Model Group')
                    ```

                `#### Description:

                    Given a scripting path of an object returns the model object with that
                    path, otherwise returns nil.`
                    `
                    If you know the scripting path of the object in the database, this is
                    the 'official' way of finding the model object.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`model_object_collection`

                `#### Syntax:

                    ```ruby
                        moc=iwdb.model_object_collection(type)
                    ```

                `#### Description:


                    Given a scripting type, returns a WSModelObjectCollection of all the
                    objects of that type – not just the objects of that type in the root.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`model_object_from_type_and_guid`

                `#### Syntax:

                    ```ruby
                        mo=iwdb.model_object_from_type_and_guid(type,guid)
                    ```

                `#### Example:

                    ```ruby
                        mo=iwdb.model_object_from_type_and_guid 'Model Network','{CEB7E8B9-D383-485C-B085-19F6E3E3C8CD}'
                    ```

                `#### Description:

                    Returns the model object of the given scripting type with the
                    'CreationGUID' (an internal database field) given in the second
                    parameter.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`model_object_from_type_and_id`

                `#### Syntax:

                    ```ruby
                        mo=iwdb.model_object_from_type_and_id(type,id)
                    ```

                `#### Example:

                    ```rb
                        mo=iwdb.model_object_from_type_and_id('Rainfall Event',1)
                    ```

                `#### Description:

                    Returns the model object in this database with the type and ID given,
                    the type is from the list of scripting types (see above), and the ID is
                    the Id in the database which will be found by selecting the 'properties'
                    option on the object.`
                    `
                    This can be an easy way of getting a WSModelObject from something you
                    have found in the InfoWorks ICM UI by selecting the object in the tree
                    and obtaining its properties.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`new_network_name`

                `#### Syntax:

                    ```ruby
                        name=iwdb.new_network_name(type,name,branch,add)
                    ```

                `#### Example:

                    ```rb
                        newName=iwdb.network_ntework_name('Model Network',oldName,false,false)
                    ```

                `#### Description:

                    The purpose of this method is to generate a name for a new network based
                    on a given network name, with the intention that the old name is the
                    name of an existing network and the new name will be used as the name of
                    a subsequently created network.`
                    `
                    The 3<sup>rd</sup> and 4<sup>th</sup> parameters are Boolean parameters
                    which control the precise naming convention used. If branch is false the
                    names will be got by appending \#1 on the end if the name does not end
                    in \# followed by a number, if it does end in a \# followed by a number
                    the number will be incremented. If branch is true the same applies
                    except that \_ is used as the special character instead of \#. If add is
                    true then \#1 or \_1 will be appended to the name regardless of whether
                    or not the name ends in \# or \_ followed by a number.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`new_model_object`

                `#### Syntax:

                    ```ruby
                        mo=iwdb.new_model_object(type,name)
                    ```

                `#### Example:

                    ```rb
                        root_master_group=iwdb.new_model_object('Master Group','MyRootMasterGroup')
                    ```

                `#### Description:

                    Given a scripting type and a name, creates a new object with that name
                    in the root of the database. For this to work it is necessary that the
                    type be a legal object type that can go into the root of the database
                    i.e. this type must be “Asset Group”,”Model Group” or “Master Group”.
                    More may be added in the future.`
                    `
                    Likely exceptions thrown by this method are:`
                    `
                    unrecognised type – if the type is not a valid scripting type name`
                    `
                    invalid object type for the root of a database – if objects of this type
                    cannot be placed in the root of the database`
                    `
                    an object of this type and name already exists in root of database – if
                    an object with this type and name exists in the root of the database`
                    `
                    licence and/or permissions do not permit creation of a child of this
                    type in the root of the database – if the object cannot be created in
                    the root of the database for licence and/or permissions reasons e.g. an
                    attempt to create an Asset Group when the user doe not have an InfoNet
                    licence of some sort`
                    `
                    unable to create object – if the creation fails for some other reason`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`path`

                `#### Syntax:

                    ```ruby
                        s=iwdb.path
                    ```

                `#### Example:

                    ```rb
                        puts iwdb.path
                    ```

                `#### Description:

                    returns the pathname of the master database as a string`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`root_model_objects`

                `#### Syntax:

                    ```ruby
                        moc=iwdb.root_model_objects
                    ```

                `#### Description:


                    Returns a WSModelObjectCollection of all the objects in the root of the
                    database.`

        ## WSModelObjectCollection

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`[]`

                `#### Syntax:

                    ```ruby
                        mo=moc[n]
                    ```

                `#### Description:


                    Returns the nth WSModelObject in the collection. The index is 0 based
                    i.e. valid values are from 0 to length-1.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`count`

                `#### Syntax:

                    ```ruby
                        n=moc.count
                    ```

                `#### Description:


                    Returns the number of WSModelObjects in the collection`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`each`

                `#### Syntax:

                    ```ruby
                        WSModelObjectCollection.each do |mo|
                    ```

                `#### Example:

                    ```rb
                        moc.each { |x| puts x.name }
                    ```

                `#### Description:

                    The each method can be used to iterate through all the objects in the
                    collection.`
        `
		`
		[/method]
		`
		`
        ## WSModelObject

            The majority of these methods are only available in the Exchange
            products.`

            `
            `

        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`[]` (Exchange only)
				`#### Syntax:
					```ruby
						puts mo['field']
					```
				
				`#### Description:
					Retrieves a value from the model object given a field name.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`[]=` (Exchange only)

                `#### Syntax:

                    ```ruby
                        mo['field']=value
                    ```

                `#### Description:


                    **v=mo\['field'\]**

                    The array operator is used to get and set values from fields in the
                    object. This is likely to be of most use for runs.`
                    `
                    The parameter is invariably a field name, the value is a Ruby value of
                    an appropriate type to be stored in the InfoWorks master database.`
                    `
                    A special case is the case where the value being stored is the reference
                    to another object in the database. In this case the value stored may be`
                    `
                    *1.*  The object as a WSModelObject (or class derived from it)`
                    `
                    *2.*  The ID of the object`
                    `
                    *3.*  The scripting path of the object`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`bulk_delete`

                `#### Syntax:

                    ```ruby
                        mo.bulk_delete
                    ```

                `#### Description:


                    This deletes the object and all its children. The deleted objects are
                    NOT put into the recycle bin, they are completely deleted.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`children`

                `#### Syntax:

                    ```ruby
                        moc=mo.children
                    ```

                `#### Example:

                    ```rb
                        master_group.children.each {|c| puts "child #{c.path}"}
                    ```

                `#### Description:

                    Returns the children of the object as a WSModelObjectCollection`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`comment`

                `#### Syntax:

                    ```ruby
                        s=mo.comment
                    ```

                `#### Description:


                    Returns the description (i.e. the text which appears in the description
                    tab of the properties for an object) as a string.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`comment=` (Exchange only)

                `#### Syntax:

                    ```ruby
                        mo.comment=s
                    ```

                `#### Description:


                    Sets the description (as described above) for an object from a string.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`compare`

                `#### Syntax:

                    ```ruby
                        b=mo.compare(mo2)
                    ```

                `#### Example:

                    ```rb
                        if mo.compare(mo2)
                            puts “networks are identical”
                        end
                    ```

                `#### Description:

                    Given another model object, compare the 2 objects returning true if they
                    are identical, false otherwise. The objects must both be of the same
                    type and must be version controlled objects or simulation results. There
                    is currently a limitation that the simulation results may only be
                    compared if the database from which they came is the current master
                    database.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`copy_here`

                `#### Syntax:

                    ```ruby
                        mo2=mo.copy_here(object,bCopySims,bCopyGroundModels)
                    ```

                `#### Description:


                    Given a model object (typically from another database) copies it into
                    the database as a child of this object, returning the new model object.
                    The bCopySims and bCopyGroundModels parameters determine whether or not
                    simulation results and ground models respectively are copied,
                    corresponding to the equivalent user interface options.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`deletable?` (Exchange only)

                `#### Syntax:

                    ```ruby
                        b=mo.deletable?
                    ```

                `#### Description:


                    Returns true if the object can be deleted by normal means i.e. without
                    using bulk\_delete which can, of course, delete anything. This
                    corresponds to whether the object can be deleted from the normal user
                    interface and reflects the same rules e.g. does it have children, is it
                    used in a simulation etc.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`delete`

                `#### Syntax:

                    ```ruby
                        mo.delete
                    ```

                `#### Description:


                    Deletes the object, providing it can be deleted in the normal user
                    interface i.e. without using bulk\_delete which can, of course, delete
                    anything. This reflects, therefore, the rules used in the user
                    interface.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`delete_results`

                `#### Syntax:

                    ```ruby
                        mo.delete_results
                    ```

                `#### Description:


                    Deletes the results for the object, if the object is a simulation.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`export`

                `#### Syntax:

                    ```ruby
                        mo.export(path,format)
                    ```

                `#### Description:


                    Exports the model object in the appropriate format.`
                    `
                    The formats permitted depend on the object type. The format string may
                    affect the actual data exported as well as the format in which the data
                    is exported e.g. for rainfall events the parameter 'CRD' means that the
                    Catchment Runoff Data is exported.`
                    `
                    When the format is the empty string the data is exported in the
                    InfoWorks text file format. This format may be used for:`
                    `
					[[ #TODO - Table with variable rows depending on version
					```
                        Inflow
                        Level
                        Infiltration
                        Waste Water
                        Trade Waste
                        Rainfall Event (non-synthetic)
                        Pipe Sediment Data
                        Observed Flow Event
                        Observed Depth Event
                        Observed Velocity Event
                        Layer List ( this is a different file format but still termed the 'InfoWorks file' in the user interface).
                        Regulator (from version 6.0)
                    ```
					For rainfall events the following parameters cause the export of other
                    data in a text file format:`
					
					[[ #TODO - Table
					```
                        CRD – Catchment Runoff Data
                        CSD – Catchment Sediment Data
                        EVP – Evaporation
                        ISD – Initial Snow Data
                        TEM – Temperature Data
                        WND – Wind Data
					```
					
                    For pollutant graphs the parameters listed in Appendix A list cause the
                    export of the appropriate pollutant's data in the text file format.`
                    `
                    If the format is 'CSV' the file will be exported in 'InfoWorks CSV'
                    format for the following object types:`
                    `
					[[ #TODO - Table with variable rows depending on version
                    ```
						Level
						Infiltration
						Inflow
						Observed Flow
						Observed Depth
						Observed Velocity
						Rainfall Event (synthetic – main rainfall data)
						Regulator
						Damage Function  (from ICM version 6.5)
						Waste Water      (from an ICM version 7.5 patch)
						Trade Waste      (from an ICM version 7.5 patch)
					```
        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`(from version 6.5)`

                    The results obtained by risk analysis runs may be exported as follows:`
					`
                    For Risk Analysis Results objects (known in ICM Exchange as Risk
                    Calculation Results) the files may be exported by using the following in
                    the format field:`
					`
                    > "Receptor Damages"
                    > "Component Damages"
                    > "Code Damages"
                    > "Impact Zone Damages"
                    > "Category Damages"
                    > "Inundation Depth Results"
					`
                    For Risk Analysis Sim objects (known in ICM Exchange as Damage
                    Calculation Results) the files may be exported by using the following in
                    the format field:`
					`
                    > "Receptor vs Code"
                    > "Receptor vs Component"
                    > "Code vs Component"
                    > "Impact Zone vs Code"
                    > "Impact Zone Code vs Component"
                    > "Category Code vs Component"

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`find_child_model_object`

                `#### Syntax:

                    ```ruby
                        mo_found=mo.find_child_model_object(type,name)
                    ```

                `#### Description:


                    Given the scripting type of an object and a name will return the child
                    of the object with that name and type.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`id`

                `#### Syntax:

                    ```ruby
                        n=mo.id
                    ```

                `#### Description:


                    Returns the ID of the model object as a number`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`import_data`

                `#### Syntax:

                    ```ruby
                        import_data(format,filepath)
                    ```

                `#### Description:


                    Imports data into an existing object.`
					`
                    Currently may only be used for rainfall events and pollutographs.`
					`
                    The formats supported for rainfall events are`
					`
                    CRD,CSD,EVP,ISD,TEM and WND which export data in the InfoWorks text file
                    format and have the same meaning as for export\_data above.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`import_new_model_object`

                `#### Syntax:

                    ```ruby
                        mo=mo.import_new_model_object(type,name,format,filepath,event)
                    ```

                `#### Description:


                    Imports a new model object from a file.`
					`
                    Permitted types are:`
					
                    > Inflow
                    > Level
                    > Infiltration
                    > Waste Water
                    > Trade Waste
                    > Rainfall Event (non-synthetic)
                    > Pipe Sediment Data
                    > Observed Flow Event
                    > Observed Depth Event
                    > Observed Velocity Event
                    > Layer List (this is a different file format but still termed the 'InfoWorks file' in the user interface)
                    > Regulator *(from 6.0)*
                    > Damage Function *(from 6.5)*
					`
                    The format parameter may be “” (for 'InfoWorks format' files) or “CSV”
                    for InfoWorks format CSV files (not available for layer lists or damage
                    functions). *(CSV format added in 6.0)*`
					`
                    The event parameter is for compatibility with old files and should in
                    general be set to 0`
					`
                    The object on which the method is called must be of a suitable type to
                    contain the object imported.`
					`
                    e.g.`

                    ```ruby
                        rainfall=model_group.import_new_model_object 'Rainfall Event','The Rainfall','','d:temp1.red',0
                    ```

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`import_tvd(Exchange only)`

                `#### Syntax:

                    ```ruby
                        mo.import_tvd(filename,format,event)
                    ```

                `#### Description:


                    Imports event data into an existing object.`
					`
                    The parameters are as follows:`
					`
                    > Filename – file to be imported
                    > Format – 'CSV' or 'RED'
                    > Event – integer – must be present but is ignored
					`
                    If the format is 'CSV' this will import a CSV file in the 'InfoWorks CSV
                    file' format into an existing event, overwriting the data already there
                    if there is any.`
					`
                    If the format is 'RED' and the type of the object is a rainfall event
                    this will import the data in event file format into an existing event,
                    overwriting the data already there if there is any.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`modified_by`

                `#### Syntax:

                    ```ruby
                        s=mo.modified_by
                    ```

                `#### Description:


                    Returns the name of the user who last modified the object as a string.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`name`

                `#### Syntax:

                    ```ruby
                        s=mo.name
                    ```

                `#### Description:

                    Returns the name of an object as a string.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`name=` (Exchange only)

                `#### Syntax:

                    ```ruby
                        mo.name=s
                    ```

                `#### Description:


                    Sets the name of an object from a string`
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`new_model_object` – limited functionality in UI, full in Exchange – see below

                `#### Syntax:

                    ```ruby
                        mo2=mo.new_model_object(type,name)
                    ```

                `#### Example:

                    ```ruby
                        child=mo.new_model_object('Model Network','MyNetwork')
                    ```

                `#### Description:

                    Given a scripting type and a name will create a child object with that
                    type and name. The type must be a type that can be contained in the
                    object.`
					`
                    Runs must be created using the new\_run method and sims cannot be
                    created directly – they are created along with the runs based on the
                    nature of the network and rainfall events / flow surveys used to create
                    the run.`
					`
                    Risk analysis runs must be created using the `new_risk_analysis_run`
                    method.`
					`
                    Likely exceptions to be thrown by this method are:`
					`
                    unrecognised type – if the type is not a valid scripting type`
					`
                    runs must be created using the `new_run` method – if an attempt is made
                    to create a run`
					`
                    sims cannot be created directly – if an attempt is made to create a sim`
					`
                    invalid child type for this object – if the type in the first parameter
                    may not be a child of this object type`
					`
                    name already in use – if the name is in use (globally for a version
                    controlled object, as a child of this object for other types)`
					`
                    licence and/or permissions do not permit creation of a child of this
                    type for this object – if this type of object cannot be created for
                    licensing and/or permissions reasons e.g. creation of an Asset Group
                    when the software is begin run without an InfoNet licence of some sort.`
					`
                    unable to create object – if the call fails for some other reason.`
					`
                    selection lists may not be created from scripts in the UI in viewer mode`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`new_risk_analysis_run`

                `#### Syntax:

                    ```ruby
                        raro=mo.new_risk_analysis_run(name,damage_function,runs,param)
                    ```

                `#### Description:


                    Creates a new risk analysis run object. The parameters are as follows:
					`
                    Damage\_function - The parameter must be the ID of the damage function
                    object, its scripting path, or the WSModelObject (i.e. the damage
                    function object returned from a suitable call).
					`
                    Runs – This parameter must be one of
					`
                    1.  The ID of the 'normal' run object`
                    2.  The scripting path of the 'normal' run object`
                    3.  The WSModelObject representing the run object`
                    4.  An array of items which must all be of the types described in 1 to 3 above`
					`
                    Param – the numerical parameter

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`new_run`

                `#### Syntax:

                    ```ruby
                        run=mo.new_run(name,network,commit_id,rainfalls_and_flow_surveys,scenarios,parameters)
                    ```

                `#### Description:


                    Creates a new run. The method must be called on a model group otherwise
                    an exception will be thrown – 'new\_run : runs may only be created in
                    model groups'.`
					`
                    The method can take arrays as parameters for both the rainfalls and flow
                    surveys and for the scenarios. In the same way that dropping multiple
                    rainfall events and flow surveys into the drop target on the schedule
                    run dialog and selecting multiple scenarios on it yield multiple
                    simulations for a run, so calling this method with arrays of values and
                    with synthetic rainfall events which have multiple parameters (singly or
                    in an array) will yield multiple sims for the run.`
					`
                    The 'run' method which actually runs simulations is a method of the
                    individual sim objects below the run, which may easily be found by using
                    the 'children' method of the WSModelObject created using this method.`
					`
                    The parameters are as follows:`
					`
                    > Name – the name of the new run. This must not already be in use in the
                    > model group otherwise an exception will be thrown – 'new\_run : name
                    > already in use'.
                    >
                    > Network – the network used for the run. The parameter must be the ID
                    > of the network, its scripting path, or the WSNumbatNetworkObject (i.e.
                    > the network object returned from a suitable call).
                    >
                    > Commit ID – the commit ID to be used for the run. This may either be
                    > the integer commit ID or nil in which case the latest commit at time
                    > the run is created will be used.
					`
                    Rainfalls and flow surveys – this may be:`
					`
                    1.  nil – in this case the run will be a dry weather flow run`
                    2.  a WSModelObject which is a rainfall event or a flow survey`
                    3.  the scripting path of a rainfall event or a flow survey as a string`
                    4.  the ID of a rainfall event`
                    5.  a negative number equal to -1 times the ID of a flow survey e.g. -7
                        means the Flow Survey with ID 7.`
                    6.  An array. If the parameter is an array, then if the length of the
                        array is 0 then the event will be a dry weather flow run, otherwise
                        all the array elements must be one of 2 – 5 above. The array may not
                        contain duplicates otherwise an exception will be thrown.`
					`
                    Scenarios – this may be:
					`
                    1.  nil – in this case the run will use the base scenario of the network`
                    2.  the name of a scenario`
                    3.  an array in which each element is the name of a scenario as
                        a string. It must not contain scenarios that do not exist
                        or duplicates.`
					`
                    Parameters – this must be a hash containing parameters (see Appendix 2).`
					`
                    Parameters for the run may either be set in this call.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`update_to_latest`

                `#### Syntax:

                    ```ruby
                        mo.update_to_latest
                    ```

                `#### Description:


                    This method may only be used on runs. The following conditions must
                    apply:`
					`
                    1.  The 'Working' field must have been set to true`
                    2.  There must be no uncommented changes for the network for the run.`
                    3.  all scenarios which were included in the list of scenarios for which
                        the run was set up must be present and validates.`
					`
                    This method has the same effect as pressing the 'update to latest
                    version of network' button on the Run view in the user interface.`

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`open`

                `#### Syntax:

                    ```ruby
                        opennet=mo.open
                    ```

                `#### Description:

                    Returns a WSOpenNetwork object corresponding to the model object,
                    providing the model object is of a network type or a sim – see above for
                    the description of the difference between a WSModelObject and a
                    WSOpenNetwork.`
					`
                    When this method is called on a sim, the network will be opened with the
                    results of the simulation loaded into it. An exception will be thrown if
                    the simulation did not succeed, the results are inaccessible or are not
                    open.`
					`
                    When you open the results of a simulation:`
                    -   The network is opened as read only`
                    -   The current scenario is set to the scenario used for the simulation`
                    -   The current scenario cannot be changed`
                    -   As with the behaviour in the UI of the software, the network with
                        the results loaded has a current timestep. The results start by
                        being opened at the first timestep (timestep 0) unless there are
                        only maximum results in which case they are opened as the maximum
                        results timestep.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`path`

                `#### Syntax:

                    ```ruby
                        s=mo.path
                    ```

                `#### Example:

                    ```rb
                        puts mo.path
                    ```

                `#### Description:

                    Returns the scripting path of the object as a string.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`parent_type`

                `#### Syntax:

                    ```ruby
                        s=mo.parent_type
                    ```

                `#### Description:

                    Returns the scripting type of the parent of the object (or 'Master
                    Database' if the object is in the root of the database).`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`parent_id`

                `#### Syntax:

                    ```ruby
                        n=mo.parent_id
                    ```

                `#### Description:

                    Returns the ID of the parent object (or 0 if the object is in the root
                    of the database).`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`type`

                `#### Syntax:

                    ```ruby
                        s=mo.type
                    ```

                `#### Description:

                    Returns the scripting type of the object.`

        ## WSNumbatNetworkObject

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`commit`

                `#### Syntax:

                    ```ruby
                        id=nno.commit(comment)
                    ```

                `#### Example:

                    ```rb
                        nno.commit 'this is the commit comment for this commit'
                    ```

                    or

                    ```rb
                        id=nno.commit('this is the commit comment for this commit').
                    ```

                `#### Description:

                    Commits changes to a network to the database. Returns the commit ID or
                    returns nil if there were not changes made since the last commit.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`commits`

                `#### Syntax:

                    ```ruby
                        c=nno.commits
                    ```

                `#### Description:

                    Returns a WSCommits object containing the commits for the network i.e.
                    the details of what is committed at each stage in the history of the
                    network.`
					`
                    e.g.`
					`
                    ```ruby
                        mo.commits.each do |c|
                            puts "#{c.branch_id},#{c.comment},#{c.commit_id},#{c.deleted_count},#{c.inserted_count},#{c.modified_count},#{c.setting_changed_count},|#{c.user}|"
                        end
                    ```
					`
                    or
					`
                    ```ruby
                        (0...mo.commits.length).each do |i|
                            c=mo.commits[i]
                            puts "#{c.branch_id},#{c.comment},#{c.commit_id},#{c.deleted_count},#{c.inserted_count},#{c.modified_count},#{c.setting_changed_count},|#{c.user}|"
                        end
                    ```

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`commit_reserve`

                `#### Syntax:

                    ```ruby
                        id=nno.commit_reserve(comment)
                    ```

                `#### Description:

                    This is similar to commit in that it commits changes to the network to
                    the database and returns the commit ID if changes have been made, nil
                    otherwise. The difference is that commit\_reserve keeps the network
                    reserved.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`csv_changes`

                `#### Syntax:

                    ```ruby
                        nno.csv_changes(commit_id1, commit_id2, filename)
                    ```

                `#### Description:

                    Outputs the differences between commit id 1 and commit id 2 to the
                    specified filename. The CSV file output is in the same format as
                    generated by the “Compare network” function and can be used to apply the
                    changes to another network via “Import/Update from CSV files…”
                    functionality.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`csv_export`

                `#### Syntax:

                    ```ruby
                        nno.csv_export(filename,options)
                    ```

                `#### Description:

                    Exports the network to a CSV file with options similar to those
                    available in the user interface.`
					`
                    The second parameter may either be nil or a hash containing the options.
                    If the parameter is nil then the default options will be used. The hash
                    values are as follows:`
					`
					[table]
						[header]
							[column]Key[/column]
							[column]Type[/column]
							[column]Default[/column]
							[column]Notes[/column]
						[/header]
						[row]
							[column]Use Display Precision[/column]
							[column]`rb Boolean`[/column]
							[column]`rb true`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Field Descriptions[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Field Names[/column]
							[column]`rb Boolean`[/column]
							[column]`rb true`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Flag Fields[/column]
							[column]`rb Boolean`[/column]
							[column]`rb true`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Multiple Files[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column]Set to true to export to different files, false to export to the same file.[/column]
						[/row]
						[row]
							[column]Native System Types[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column][/column]
						[/row]
						[row]
							[column]User Units[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Object Types[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Selection Only[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Units Text[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Triangles[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Coordinate Arrays Format[/column]
							[column]`rb String`[/column]
							[column]`rb "Packed"`[/column]
							[column]One of `rb "Packed"`, `rb "None"` or `rb "Seperate"`[/column]
						[/row]
						[row]
							[column]Other Arrays Format[/column]
							[column]`rb String`[/column]
							[column]`rb "Packed"`[/column]
							[column]One of `rb "Packed"`, `rb "None"` or `rb "Seperate"`[/column]
						[/row]
					[/table]
					`
                    e.g.`
					`
                    ```ruby
                        myHash=Hash.new
                        myHash['Multiple Files']=true
                        myHash['Coordinate Arrays Format']='None'
                        no.csv_export 'd:tempnetwork.csv',myHash
                    ```

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`csv_import`

                `#### Syntax:

                    ```ruby
                        nno.csv_import(filename,options)
                    ```

                `#### Description:


                    Updates the network from a CSV file with options similar to those
                    available in the user interface. The second parameter may either be nil
                    or a hash containing the options. If the parameter is nil then the
                    default options will be used. The hash values are as follows:`
					`
					[table]
						[header]
							[column]Key[/column]
							[column]Type[/column]
							[column]Default[/column]
							[column]Notes[/column]
						[/header]
						[row]
							[column]Force Link Rename[/column]
							[column]`rb Boolean`[/column]
							[column]`rb true`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Flag Genuine Only[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Load Null Fields[/column]
							[column]`rb Boolean`[/column]
							[column]`rb true`[/column]
							[column][/column]
						[/row]
						[row]
							[column]Update With Any Flag[/column]
							[column]`rb Boolean`[/column]
							[column]`rb true`[/column]
							[column]True to update all values, false to only update fields with the 'update flag' flag.[/column]
						[/row]
						[row]
							[column]Use Asset ID[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column][/column]
						[/row]
						[row]
							[column]User Units[/column]
							[column]`rb Boolean`[/column]
							[column]`rb true`[/column]
							[column]Set to true for User Units, false for Native Units - used for fields without an explicit unit set in a 'units' record.[/column]
						[/row]
						[row]
							[column]UK Dates[/column]
							[column]`rb Boolean`[/column]
							[column]`rb false`[/column]
							[column]If set to true, the import is done with the UK date format for dates regardless of the PC's settings.[/column]
						[/row]
						[row]
							[column]Action[/column]
							[column]`rb String`[/column]
							[column]`rb "Mixed"`[/column]
							[column]One of `rb "Mixed"`,`rb "Update And Add"`,`rb "Update Only"`,`rb "Delete"`[/column]
						[/row]
						[row]
							[column]Header[/column]
							[column]`rb String`[/column]
							[column]`rb "ID"`[/column]
							[column]One of `rb "ID"`,`rb "ID Description"`,`rb "ID Description Units"`,`rb "ID Units"`[/column]
						[/row]
						[row]
							[column]New Flag[/column]
							[column]`rb String`[/column]
							[column]`rb ""`[/column]
							[column]Flag used for new and updated data.[/column]
						[/row]
						[row]
							[column]Update Flag[/column]
							[column]`rb String`[/column]
							[column]`rb ""`[/column]
							[column]If the 'update with any flag' option is set to false, only update fields with this flag value.[/column]
						[/row]
					[/table]

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`current_commit_id`

                `#### Syntax:

                    ```ruby
                        id=nno.current_commit_id
                    ```

                `#### Description:
					
                    Returns the commit ID of the local copy of the network – this may not be
                    the latest commit ID i.e. the most recent commit ID on the server, which
                    is returned by latest\_commit\_id (see below).`
					
        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`GIS_export`

                `#### Syntax:

                    ```ruby
                        nno.GIS_export(format,params,location)
                    ```

                `#### Description:


                    Exports the network data to GIS.`
					`
                    The parameters are as follows:`
					`
                    Format:`
					`
                    This parameter must be one of the following:`
                    -   SHP – Shape file`
                    -   TAB – Tab file`
                    -   MIF – MIF file`
                    -   GDB – GeoDatabase`
					`
                    Params:
					`
                    This parameter can either be a hash, described below, or nil. If the
                    parameter is nil then the default values for its various options will be
                    used.`
					`
                    Folder:`
					`
                    This parameter contains the base folder for the files to be exported,
                    except for the GDB format where it is the name of the GeoDatabase.`
					`
                    The params hash can contain a number of keys. If the hash is nil or the
                    value is not specified the default behaviour applies as described below.`
					`
                    ExportFlags – Boolean – if this is true then the flags are exported
                    along with the data values, if false they aren't. The default is true.`
					`
                    Feature Dataset – String – for GeoDatabases, the name of the feature
                    dataset. The default is an empty string.`
					`
                    SkipEmptyTables – Boolean – if true skips empty tables (even if they are
                    listed in the value for the Tables key). The default is false.`
					`
                    Tables – Array as described below – the default is to export results for
                    all tables.`
					`
                    UseArcGISCompatability – Boolean – this is the equivalent of selecting
                    the check-box in the UI. The default is false i.e. the equivalent of not
                    checking the check-box in the UI.`
					`
                    The tables element of the hash must be an array of strings which must be
                    names of tables as returned by the list\_GIS\_export\_tables. Duplicates
                    and unrecognised values are not permitted.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`latest_commit_id`

                `#### Syntax:

                    ```ruby
                        id=nno.latest_commit_id
                    ```

                `#### Description:`
					
                    Returns the latest commit ID for the network i.e. the ID of the most
                    recent commit on the server. This may not be the same as the commit ID
                    of the local copy, which is returned by current\_commit\_id (see above).

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`list_GIS_export_tables`

                `#### Syntax:

                    ```ruby
                        arr=nno.list_GIS_export_tables
                    ```

                `#### Description:
					
                    This method lists the tables that will be exported to GIS as an array of
                    strings. This method is designed to return information useful when
                    customising the parameters to GIS\_export.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`odec_export_ex`

                `#### Syntax:

                    ```ruby
                        nno.odec_export_ex(format, config_file, options, …)
                    ```

                `#### Description:


                    This method exports network data using a previously set up Open Data
                    Export Centre configuration.`
					`
                    The number of parameters for this method is variable and depends on the
                    type of data imported (determined by the first parameter) and the number
                    of imports set up in one call to the method, which can be more then one.`
					`
                    The first parameter can be one of the table below. Depending on that
                    value, the number of parameters per table is as shown in the table:`
					`
					[table]
						[header]
							[column]Format[/column]
							[column]Meaning[/column]
							[column]Parameters per table[/column]
							[column]Requirements[/column]
							[column]Example[/column]
						[/header]
						[row]
							[column]CSV[/column]
							[column]Comma separated text file.[/column]
							[column]2[/column]
							[column][/column]
							[column][/column]
						[/row]
						[row]
							[column]TSV[/column]
							[column]Tab separated text file.[/column]
							[column]2[/column]
							[column][/column]
							[column][/column]
						[/row]
						[row]
							[column]XML[/column]
							[column]Extensible Markup Language.[/column]
							[column]4[/column]
							[column][/column]
							[column][/column]
						[/row]
						[row]
							[column]MDB[/column]
							[column]Microsoft database (can be made and used in MSAccess)[/column]
							[column]3[/column]
							[column][/column]
							[column][/column]
						[/row]
						[row]
							[column]SHP[/column]
							[column]ESRI Shape File[/column]
							[column]2[/column]
							[column][/column]
							[column][/column]
						[/row]
						[row]
							[column]MIF[/column]
							[column]MapInfo Interchange Format[/column]
							[column]2[/column]
							[column][/column]
							[column][/column]
						[/row]
						[row]
							[column]TAB[/column]
							[column]MapInfo TAB file (binary file format)[/column]
							[column]2[/column]
							[column]Only available if your ICM was installed with the installer with the MapXTreme component[/column]
							[column][/column]
						[/row]
						[row]
							[column]GDB[/column]
							[column]GeoDatabase[/column]
							[column]6[/column]
							[column]Only available with a suitably licensed and available ESRI desktop or server product.[/column]
							[column][/column]
						[/row]
						[row]
							[column]ORACLE[/column]
							[column]Oracle[/column]
							[column]7[/column]
							[column]Requires relevant client software to be installed.[/column]
							[column][/column]
						[/row]
						[row]
							[column]SQLSERVER[/column]
							[column]SQL Server[/column]
							[column]9[/column]
							[column]Requires relevant client software to be installed.[/column]
							[column][/column]
						[/row]
					[/table]
					`
                    The second parameter is the path of the CFG file, as saved from the Open
                    Data Import Centre user interface. It can contain the mappings for more
                    than one table.`
					`
                    The third parameter must be nil or a hash containing the options, which
                    broadly correspond to those in the Open Data Export Centre user
                    interface as follows:`
					`
                    | Key              | Type       | Default | Notes                                                  |
                    |------------------|------------|---------|--------------------------------------------------------|
                    | Callback Class   | Ruby Class | nil     |                                                        |
                    | Image Folder     | String     | ""      |                                                        |
                    | Units Behaviour  | String     | Native  | Native or User                                         |
                    | Report Mode      | Boolean    | FALSE   | True to export in 'report mode'                        |
                    | Append           | Boolean    | FALSE   | True to enable 'Append to existing data'               |
                    | Export Selection | Boolean    | FALSE   | True to export the selected objects only               |
                    | Previous Version | Integer    | 0       | Previous version, if not zero differences are exported |
					`
                    Following these three parameters, there then follow a multiple of the
                    'parameters per table' depending on data type, as show in the table
                    above. It is possible to export data into more than one table by
                    supplying a multiple of that number of parameters e.g. to export data
                    from 3 tables into CSV files, six parameters are supplied for these
                    bringing the total to 9 parameters. Alternatively, of course, it is
                    possible to export the data by making three calls to the method.`
					`
                    The parameters are as follows:`
					`
                    In all cases the first parameter is the name of the table to export. In
                    this context the name is as displayed in the software's user interface
                    in the Open Data Export Centre with any spaces removed. E.g. Node,
                    CCTVSurvey. This differs from the convention used elsewhere e.g. for
                    SQL.`
					`
                    For CSV, TSV, MIF, TAB and Shape files the second parameter is the path
                    of the file to export.`
					`
                    For Access databases (MDB) the parameters are as described below:`
					`
                    1.  Table to export`
                    2.  Name of table in Access database`
                    3.  File name of Access database`
					
                    For XML the parameters are as follows:`
                    1.  Table to export`
                    2.  'Feature class' (as it is called in the UI – i.e. the name of the
                        root element)`
                    3.  'Feature dataset' (as it is called in the UI- i.e. the name used for
                        each data element)`
                    4.  XML file name.`

                    For GeoDatabase the parameters are as follows:`
					`
                    1.  Table to export`
                    2.  Feature class`
                    3.  Feature dataset`
                    4.  Update – true to update, false otherwise. If true the feature class
                        must exist.`
                    5.  ArcSDE configuration keyword – nil for Personal / File GeoDatabases,
                        and ignored for updates`
                    6.  Filename (for personal and file GeoDatabases, connection name
                        for SDE)`
					`
                    For Oracle the parameters are as follows:`
					`
                    1.  Table to export`
                    2.  Table name in Oracle`
                    3.  Table owner`
                    4.  Update – true to update, false otherwise. If true the table`
                        must exist.`
                    5.  User name`
                    6.  Password`
                    7.  Connection string`
					`
                    For SQL Server the parameters are as follows:`
					`
                    1.  Table to export`
                    2.  Table name in SQL Server`
                    3.  Server name`
                    4.  Instance name`
                    5.  Database name`
                    6.  Update – true to update, false otherwise`
                    7.  Integrated security – true if integrated, false if not`
                    8.  User name`
                    9.  Password`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`odic_import_ex`

                `#### Syntax:

                    ```ruby
                        nno.odic_import_ex(format, config_file, options, …)
                    ```

                `#### Description:

                    This method imports and updates network data using a previously set up
                    Open Data Import Centre configuration.`
					`
                    Unlike the WSOpenNetwork version, it returns nil.`
					`
                    The number of parameters for this method is variable and depends on the
                    type of data imported (determined by the first parameter) and the number
                    of imports set up in one call to the method, which can be more then one.`
					`
                    The first parameter can be one of the table below. Depending on that
                    value, the number of parameters per table is as shown in the table:`
					`
                    | **Format** | **Meaning**                                                 | **Parameters per table** |
                    |------------|-------------------------------------------------------------|--------------------------|
                    | CSV        | CSV                                                         | 2                        |
                    | TSV        | Tab separated text data (not to be confused with TAB files) | 2                        |
                    | XML        | XML                                                         | 3                        |
                    | MDB        | Access database                                             | 3                        |
                    | SHP        | Shape file                                                  | 2                        |
                    | GDB        | GeoDatabase                                                 | 3                        |
                    | ORACLE     | Oracle                                                      | 6                        |
                    | SQLSERVER  | SQL Server                                                  | 8                        |
					`
                    The GDB option only available with a suitably installed and licenced
                    copy of an ESRI server or desktop product.`
					`
                    The ORACLE and SQLSERVER options require the relevant client software to
                    be installed.`
					`
                    The second parameter is the path of the CFG file, as saved from the Open
                    Data Import Centre user interface. It can contain the mappings for more
                    than one table.`
					`
                    The third parameter must be nil or a hash containing the options, which
                    broadly correspond to those in the Open Data Import Centre user
                    interface as follows:`
					`
                    | **Key**                        | **Type**   | **Default** | **Notes**                                                   |
                    |--------------------------------|------------|-------------|-------------------------------------------------------------|
                    | Error File                     | String     | Blank       | Path of error file                                          |
                    | Callback Class                 | Ruby Class | nil         | Class used for Ruby callback methods                        |
                    | Set Value Flag                 | String     | blank       | Flag used for fields set from data                          |
                    | Default Value Flag             | String     | blank       | Flag used for fields set from the default value column      |
                    | Image Folder                   | String     | blank       | folder to import images from                                |
                    | Duplication Behaviour          | String     | Merge       | One of 'Duplication Behaviour','Overwrite','Merge','Ignore' |
                    | Units Behaviour                | String     | Native      | One of 'Native','User','Custom'                             |
                    | Update Based On Asset ID       | Boolean    | FALSE       |                                                             |
                    | Update Only                    | Boolean    | FALSE       |                                                             |
                    | Delete Missing Objects         | Boolean    | FALSE       |                                                             |
                    | Allow Multiple Asset IDs       | Boolean    | FALSE       |                                                             |
                    | Update Links From Points       | Boolean    | FALSE       |                                                             |
                    | Blob Merge                     | Boolean    | FALSE       |                                                             |
                    | Use Network Naming Conventions | Boolean    | FALSE       |                                                             |
                    | Import Images                  | Boolean    | FALSE       |                                                             |
					`
                    Following these three parameters, there then follow a multiple of the
                    'parameters per table' depending on data type, as show in the table
                    above. It is possible to import data into more than one table, or data
                    into one table from more than one source by supplying a multiple of that
                    number of parameters e.g. to import data into 3 tables from CSV files,
                    six parameters are supplied for these bringing the total to 9
                    parameters. Alternatively, of course, it is possible to import the data
                    by making three calls to the method.`
					`
                    All these parameters are strings with the exception of one parameter for
                    SQL Server, which is the sixth out of eight parameters and is a Boolean
                    which is described below.`
					`
                    The parameters are as follows:`
					`
                    In all cases the first parameter is the name of the table to import. In
                    this context the name is as displayed in the software's user interface
                    in the Open Data Import Centre with any spaces removed. E.g. Node,
                    CCTVSurvey. This differs from the convention used elsewhere e.g. for
                    SQL.`
					`
                    For subtables the name is the name of the table, followed by the name of
                    the subtable without any spaces e.g. to import the Details from the CCTV
                    Survey, the string should be CCTVSurveyDetails.`
					`
                    For CSV, TSV and Shape files the second parameter is the path of the
                    file to import.`
					`
                    For Access databases the second parameter is the path of the Access
                    database and the third parameter is the name of the table or stored
                    query to import. Data can be imported on the basis of SQL queries by
                    adding an SQL query to the database, however an SQL expression cannot be
                    used in this parameter.`
					`
                    For GeoDatabases the second parameter is the name of the feature class
                    to import from and the third parameter is the path of the GeoDatabase.`
					`
                    For Oracle the parameters are as follows:
					`
                    > 1 – the table name to import into as described above
                    >
                    > 2 – the table name in the Oracle database
                    >
                    > 3 – the connection string e.g. '//power:/orcl'
                    >
                    > 4 – the owner of the Oracle table being imported from
                    >
                    > 5 – the oracle user name
                    >
                    > 6 – the oracle password
					`
                    For SQL server the parameters are as follows:`
					`
                    > 1– the table name to import into as described above
                    >
                    > 2 – the table name in SQL Server
                    >
                    > 3 – the server name
                    >
                    > 4 – the SQL Server instance name
                    >
                    > 5 – the database name
                    >
                    > 6 – integrated security (Boolean – true or false, true meaning
                    > integrated security)
                    >
                    > 7 – user name (for non-integrated security, nil otherwise)
                    >
                    > 8- password (for non-integrated security, nil otherwise)

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`remove_local`

                `#### Syntax:

                    ```ruby
                        nno.remove_local
                    ```

                `#### Description:


                    Removes the local copy of the network, any uncommitted changes will be
                    lost.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`reserve`

                `#### Syntax:

                    ```ruby
                        nno.reserve
                    ```

                `#### Description:


                    Reserves the network so no-one else can edit it and updates the local
                    copy to the latest version.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`revert`

                `#### Syntax:

                    ```ruby
                        nno.revert
                    ```

                `#### Description:


                    Reverts any uncommitted changes in the local copy of the network.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`select_changes`

                `#### Syntax:

                    ```ruby
                        nno.select_changes
                    ```

                `#### Description:


                    Select all objects added or changed between the commit id specified and
                    the current network.`
                    `
                    The network must have no outstanding changes for this to work (otherwise
                    an exception will be thrown).`
                    `
                    Obviously, deleted objects will not be selected.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`select_clear`

                `#### Syntax:

                    ```ruby
                        nno.select_clear
                    ```

                `#### Description:


                    Clears the selection in the network`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`select_count`

                `#### Syntax:

                    ```ruby
                        n=nno.select_count
                    ```

                `#### Description:


                    Returns the number of selected items in the network`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`select_sql`

                `#### Syntax:

                    ```ruby
                        n=nno.select_sql(table,query)
                    ```

                `#### Example:

                    ```rb
                        n=nno.select_sql('hw_node','x>0')
                    ```

                `#### Description:

                    This method runs the SQL query with the given table being the 'current
                    table' as it appears in the SQL dialog i.e. the default table if the SQL
                    query does not further qualify the table name.`
					`
                    The names `'_nodes'` or `'_links'` can be used to run the SQL over all
                    node or link tables in the same way as can be achieved by selecting 'All
                    nodes' or 'All links' in the dropdowns in the SQL dialog.`
					`
                    The SQL query can include multiple clauses in the same was as SQL run
                    from the user interface, and can use any of the options that do not open
                    results or prompt grids e.g.`
					`
                    `rb nno.select_sql 'hw_node', "SELECT distinct x into file 'd:\\temp\\distinctx.dat'"`
					`
                    The method returns the number of objects selected in the last clause in
                    the SQL block selecting a non-zero number of object (or zero if there is
                    no such clause).`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`uncommitted_changes?`

                `#### Syntax:

                    ```ruby
                        b=nno.uncomitted_changes?
                    ```

                `#### Description:


                    Returns true if there are uncomitted changes in the local copy of the
                    network, false otherwise.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`unreserve`

                `#### Syntax:

                    ```ruby
                        nno.unreserve
                    ```

                `#### Description:


                    Cancels the reservation of the network.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`update`

                `#### Syntax:

                    ```ruby
                        b=nno.update
                    ```

                `#### Description:


                    Updates the local copy of the network from the server. Returns true if
                    there are no conflicts, false if there are.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`user_field_names`

                `#### Syntax:

                    ```ruby
                        nno.user_field_names(filename,arbitrarystring)
                    ```

                `#### Description:


                    Produces a CSV file consisting of the names of all the user fields for
                    all the object types in the network.`
                    `
                    The CSV file has no header and the arbitrary string is output as the
                    first column, the second column being the internal table name and the
                    third column being the user field name.`



        ## WSSimObject

            An object of this type represents a Sim object, a Risk Analysis Results
            object or a Risk Analysis Sim object. The Risk Analysis Results objects
            contain the results for a number of return periods and summary results.
            The Risk Analysis Sim objects contain only summary results.`
            `
            The different return periods for the Risk Analysis Results objects
            correspond to the timesteps for 'normal' simulations. The names of the
            methods reflect the usage for 'normal' simulations i.e. to list the
            return periods for a risk analysis results object you should use the
            list\_timesteps method.`
            `
            Various methods cannot be called for the Risk Analysis Sim objects if
            those methods are not relevant for sims with only summary results.`
            `
            This chart shows which methods are available for which object types:`
            `
            |                                    | Sim | Risk Analysis Results | Risk Analysis Sim |
            |------------------------------------|-----|-----------------------|-------------------|
            | list\_max\_results\_attributes     | \*  | \*                    | \*                |
            | list\_results\_attributes          | \*  | \*                    |                   |
            | list\_results\_GIS\_export\_tables | \*  | \*                    | \*                |
            | list\_timesteps                    | \*  | \*                    | \*                |
            | max\_flood\_contours\_export       | \*  |                       |                   |
            | max\_results\_binary\_export       | \*  | \*                    | \*                |
            | max\_results\_csv\_export          | \*  |                       |                   |
            | results\_binary\_export            | \*  | \*                    |                   |
            | results\_csv\_export               | \*  |                       |                   |
            | results\_csv\_export\_ex           | \*  |                       |                   |
            | results\_GIS\_export               | \*  | \*                    | \*                |
            | results\_path                      | \*  |                       |                   |
            | run                                | \*  |                       |                   |
            | run\_ex                            | \*  |                       |                   |
            | status                             | \*  |                       |                   |
            | success\_substatus                 | \*  |                       |                   |
            | single\_result\_csv\_export        | \*  |                       |                   |
            | timestep\_count                    | \*  | \*                    | \*                |

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`list_max_results_attributes`

                `#### Syntax:

                    ```ruby
                        arr=sim.list_max_results_attributes
                    ```

                `#### Description:


                    Returns an array of arrays. The arrays returned correspond to the tabs
                    on the binary results export dialog e.g. 'Node', 'Link', 'Subcatchment'
                    for the time varying results. Each array contains 2 elements, the first
                    of which is the name of the Tab, whilst the 2<sup>nd</sup> is an array
                    of attribute names e.g.`
                    `
                    ```rb
                        [['Scalar',['totfl','totout','totr','totrun','totvol']],['Node',['flooddepth','floodvolume','flvol','pcvolbal','qincum','qinfnod','qnode','qrain','vflood','vground','volbal','volume','DEPNOD']]]
                    ```
                    `
                    This method is designed to return information useful when customising
                    the parameters to max\_results\_binary\_export.and
                    max\_results\_csv\_export`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`list_results_attributes`

                `#### Syntax:

                    ```ruby
                        arr=sim.list_results_attributes
                    ```

                `#### Description:


                    Returns an array of arrays. The arrays returned correspond to the tabs
                    on the binary results export dialog e.g. 'Node', 'Link', 'Subcatchment'.
                    Each array contains 2 elements, the first of which is the name of the
                    Tab, whilst the 2nd is an array of attribute names e.g.`
                    `
                    ```rb
                        [["Node", ["flooddepth", "floodvolume", "flvol", "qinfnod", "qnode",
                        "qrain", "volume", "depnod"]]

                        ["Link", ["ds_depth", "ds_flow", "ds_froude", "ds_vel", "HYDGRAD",
                        "Surcharge", "us_depth", "us_flow", "us_froude", "us_vel",
                        "qinflnk", "qlink", "volume", "pmpstate"]]

                        ["Subcatchment", ["qfoul", "qsurf01", "qsurf02", "qsurf03", "qtrade",
                        "RAINFALL", "RUNOFF"]]

                        ["Rain Gauge", ["raindpth", "RAINFALL"]]]
                    ```
                    `
                    This method is designed to return information useful when customising
                    the parameters to `results_binary_export` and `results_csv_export``

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`list_results_GIS_export_tables`

                `#### Syntax:

                    ```ruby
                        arr=sim.list_results_GIS_export_tables
                    ```

                `#### Description:


                    Returns an array of the tables that may be exported to GIS using the
                    `results_GIS_export` method. This method is designed to return
                    information useful when customising the parameters to
                    `results_GIS_export`. The list will essentially only change when more
                    tables are added to InfoWorks. The current list is:`
                    `
                    [table]
						[row]`_2DElements`             [/row]
						[row]`_links`                  [/row]
						[row]`hw_1d_results_point`     [/row]
						[row]`hw_2d_bridge`            [/row]
						[row]`hw_2d_linear_structure`  [/row]
						[row]`hw_2d_results_line`      [/row]
						[row]`hw_2d_results_point`     [/row]
						[row]`hw_2d_results_polygon`   [/row]
						[row]`hw_2d_sluice`            [/row]
						[row]`hw_bridge`               [/row]
						[row]`hw_bridge_opening`       [/row]
						[row]`hw_node`                 [/row]
						[row]`hw_river_reach`          [/row]
						[row]`hw_subcatchment`         [/row]
						[row]`hw_tvd_connector`        [/row]
                    [/table]
					`
                    Note the results for 2D elements is `_2DElements` and that the table name
                    used for all links, which are combined into one GIS layer, is `_links`.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`list_timesteps`

                `#### Syntax:

                    ```ruby
                        arr=list_timesteps
                    ```

                `#### Description:

                    For a normal simulation, this returns an array of the results timesteps
                    for the simulation. See the 'Dates and Times' section above for details
                    on how absolute and relative times are handled.
                    For a risk analysis results object, this returns an array of the return
                    periods for the object.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`max_flood_contours_export`

                `#### Syntax:

                    ```ruby
                        max_flood_contours_export(format,groundModel,theme,filename)
                    ```

                `#### Description:


                    Exports the flood contours to files (GIS or ASCII). The ASCII format is
                    the same as produced via the user interface.`
                    `
                    Format: MIF, TAB, SHP or ASCII – as with the user interface GeoDatabases
                    are not supported.`
                    `
                    GroundModel: this may either be the scripting path, the ID or the
                    WSModelObject representing a ground model (either grid or TIN). If the
                    ID is negative then it represents a TIN ground model i.e. -7 represents
                    the TIN ground model with ID 7. If the ID is positive it represents a
                    gridded ground model.`
                    `
                    For the ASCII export, this must be a grid ground model.`
                    `
                    Theme: the script path, ID or WSModelObject representing theme to use
                    for the contours.`
                    `
                    Filename: the filename to be exported.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`max_results_binary_export`

                `#### Syntax:

                    ```ruby
                        max_results_binary_export(selection,attributes,file)
                    ```

                `#### Description:


                    Exports the maximum results (and other summary results) for the
                    simulation in a binary file format intended for reading by program
                    written by a user or 3<sup>rd</sup> party. The format is documented in a
                    separate document available from Innovyze.`
                    `
                    The selection parameter may contain the ID or scripting path of a
                    selection list object, or the WSModelObject itself, or may be nil in
                    which case results for the whole network will be exported.`
                    `
                    The attributes parameter may be nil, in which case all attributes are
                    exported, or may be an array as described in the
                    list\_max\_results\_attributes method above.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`results_binary_export`

                `#### Syntax:

                    ```ruby
                        results_binary_export(selection,attributes,file)
                    ```

                `#### Description:


                    Exports the results for each results timestep for the simulation in a
                    binary file format intended for reading by program written by a user or
                    3<sup>rd</sup> party. The format is documented in a separate document
                    available from Innovyze.`
                    `
                    The selection parameter may contain the ID or scripting path of a
                    selection list object, or the WSModelObject itself, or may be nil in
                    which case results for the whole network will be exported.`
                    `
                    The attributes parameter may be nil, in which case all attributes are
                    exported, or may be an array as described in the
                    list\_max\_results\_attributes method above.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`max_results_csv_export`

                `#### Syntax:

                    ```ruby
                        results_csv_export(selection, attributes, folder)
                    ```

                `#### Description:


                    Exports the results for the simulation in the CSV format corresponding
                    to that used in the CSV results export menu option.`
                    `
                    The selection parameter may contain the ID or scripting path of a
                    selection list object, or the WSModelObject itself, or it may be nil in
                    which case results for the whole network will be exported.`
                    `
                    The attributes parameter may be nil, in which case all attributes are
                    exported, or may be an array as described in the
                    list\_max\_results\_attributes method above (i.e. as
                    max\_results\_binary\_export).`
                    `
                    (Note that the parameters for this method are the same as those for
                    results\_csv\_export\_ex)`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`results_csv_export`

                `#### Syntax:

                    ```ruby
                        results_csv_export(selection,folder)
                    ```

                `#### Description:


                    Exports the results for the simulation in the CSV format corresponding
                    to that used in the CSV results export menu option.`
                    `
                    The selection parameter may contain the ID or scripting path of a
                    selection list object, or the WSModelObject itself, or it may be nil in
                    which case results for the whole network will be exported.`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`results_csv_export_ex`

                `#### Syntax:

                    ```ruby
                        results_csv_export_ex(selection, attributes, folder)
                    ```

                `#### Description:


                    As for results\_csv\_export but takes an extra attributes parameter
                    which may be nil, in which case all attributes are exported, or may be
                    an array as described in the list\_results\_attributes method above
                    (i.e. as results\_binary\_export).

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`results_GIS_export`

                `#### Syntax:

                    ```ruby
                        results_GIS_export(format,timesteps,params,folder)
                    ```

                `#### Description:


                    Exports simulation results to GIS.
                    The parameters are as follows:

                    Format

                    This parameter must be one of the following:

                    -   SHP – Shape file

                    -   TAB – Tab file

                    -   MIF – MIF file

                    -   GDB – GeoDatabase

                    Timesteps:

                    The timesteps parameter may take a number of values of different types
                    as follows:

                    -   nil – if the parameter is nil this is the equivalent of the 'None'
                        option when selecting timesteps in the UI i.e. it only makes sense
                        if the appropriate option in the params parameter hash is set so
                        that maximum results are exported for the simulation.

                    -   'All' – if the parameter is set to the string 'All' then all
                        timesteps will be exported (this does not include the maximum
                        results – if these are wanted then the appropriate parameter in the
                        params hash should be set)

                    -   'Max' – if the parameter is set to the string 'Max' then the maximum
                        results will be exported. This can also be achieved by setting the
                        appropriate value in the params hash.

                    -   An integer ('Fixnum') representing a timestep with 0 representing
                        the first timestep. The number of timesteps may be found via the
                        timestep\_count method or by counting the number of timesteps in the
                        result of the list\_timesteps method. The maximum value permitted is
                        the number of timesteps minus 1.

                    -   An array of integers representing the timesteps as described above.
                        The values must all be valid and it may not contain duplicates. This
                        can be used to flexibly choose which timesteps to export in a
                        similar manner to the more complex UI options.

                    Params:

                    This parameter can either be a hash, described below, or nil. If the
                    parameter is nil then the default values for its various options will be
                    used.

                    Folder:

                    This parameter contains the base folder for the files to be exported,
                    except for the GDB format where it is the name of the GeoDatabase.

                    The params hash can contain a number of keys. If the hash is nil or the
                    value is not specified the default behaviour applies as described below.

                    2DZoneSQL – Array as described below – the default is not to export any
                    extra fields for 2D elements.

                    AlternativeNaming – Boolean – if this is set then the subfolders /
                    feature datasets used for the export are given simpler but less
                    attractive names which may be helpful if the aim is process the files
                    with software rather than to have a user select and open them in a GIS
                    package. The simple names are &lt;model object id&gt;\_&lt;timestep&gt;
                    with the timesteps numbered from zero as with the timesteps parameter of
                    the method and with &lt;model object id&gt;\_Max for the maxima. The
                    default is to use the same naming convention as the UI.

                    ExportMaxima – Boolean – if this is set to true the maximum results are
                    exported. The default is false i.e. to not export them.

                    Feature Dataset – String – for GeoDatabases, the name of the feature
                    dataset. The default is an empty string.

                    Tables – Array as described below – the default is to export results for
                    all tables.

                    Threshold – Double – the depth threshold below which a 2D element is not
                    exported. This is the equivalent of checking the check-box in the UI and
                    entering a value. The default is to behave as though the check-box is
                    unchecked i.e. all elements are exported.

                    UseArcGISCompatability – Boolean – this is the equivalent of selecting
                    the check-box in the UI. The default is false i.e. the equivalent of not
                    checking the check-box in the UI.

                    The tables element of the hash must be an array of strings which must be
                    names of tables as returned by the list\_results\_GIS\_exports\_table.
                    Duplicates and unrecognised values are not permitted.

                    The 2DZoneSQL element of the hash must be an array of arrays. Each of
                    those arrays must in turn contain 2 or 3 values.

                    The first value is the name of the field to be exported as a string.

                    The second value is the SQL expression as a string.

                    The optional 3<sup>rd</sup> value must be an integer between 0 and 9
                    inclusive representing the number of decimal places. If this is not set
                    then a default of 2 decimal places is used.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`run`

                `#### Syntax:

                    ```ruby
                        sim.run
                    ```

                `#### Description:


                    This method runs a simulation, waiting until the simulation finishes,
                    however long that may be. There are alternative mechanisms for running
                    simulations which permit greater control over the process. The
                    simulation will be run on the current machine.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`run_ex`

                `#### Syntax:

                    ```ruby
                        sim.run_ex(server,number_of_threads)
                    ```

                `#### Description:


                    This method behaves as run above, except that you may control (a) the
                    server on which the simulation is run and (b) the number of threads.
                    Using 0 as the number of threads causes as many threads as possible to
                    be used as with the user interface option. The server name may be a
                    machine name or one of '.' Or '\*'. '.' has the meaning of local machine
                    and '\*' has the meaning of any available server.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`status`

                `#### Syntax:

                    ```ruby
                        n=sim.status
                    ```

                `#### Description:


                    Returns the status of simulation, one of:

                    -   “None”

                    -   “Active”

                    -   “Success”

                    -   “Fail”

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`success_substatus`

                `#### Syntax:

                    ```ruby
                        n=sim.success_substatus
                    ```

                `#### Description:


                    If the simulation succeeded, returns its substatus, one of:

                    -   “Incomplete”

                    -   “Warnings”

                    -   “OK”

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`timestep_count`

                `#### Syntax:

                    ```ruby
                        n=sim.timestep_count
                    ```

                `#### Description:


                    Returns the number of results timesteps for a simulation.



        ## WSOpenNetwork

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`add_scenario`

                `#### Syntax:

                    ```ruby
                        on.add_scenario(name,based_on,notes)
                    ```

                `#### Example:

                    ```rb
                        on.add_scenario 'My Scenario',nil,'This is my scenario'
                    ```

                `#### Description:

                    The parameters are:

                    > Name – name of new scenario (string)
                    >
                    > Based\_on – name of scenario (string) or nil for a scenario not based
                    > on another one
                    >
                    > Notes – the notes for the scenario

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`clear_selection`

                `#### Syntax:

                    ```ruby
                        on.clear_selection
                    ```

                `#### Description:


                    Clears the selection

        `
        `
        [/method]
        [method exchange=true ui=false documentation="official" icmVersion="1.6.6"]

            ###`close`

                `#### Syntax:

                    ```ruby
                        on.close
                    ```

                `#### Description:


                    Closes the WSOpenNetwork. It is not necessary to call this, but it will
                    ensure that memory is freed at this point rather than when Ruby garbage
                    collection occurs. Once a WSOpenNetwork has been closed, any objects
                    within that network (e.g. of type WSRowObject) become invalid and any
                    attempt to access methods for them will cause an exception to be
                    thrown).

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`current_timestep`

                `#### Syntax:

                    ```ruby
                        n=on.current_timestep
                    ```

                `#### Description:


                    The WSOpenNetwork object has a current timestep corresponding to the
                    current timestep results have when opened in the software's UI. It
                    determines the timestep for which the 'result' method of the WSRowObject
                    returns its value. This method returns the index of the current
                    timestep, with the first timestep being index 0 and the final timestep
                    begin timestep\_count – 1. The value of -1, representing the 'maximum'
                    'timestep' is also possible. The initial value when a sim is opened in
                    ICM Exchange will be 0 if there are time varying results, otherwise -1
                    for the 'maximum' 'timestep'.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`current_timestep_time`

                `#### Syntax:

                    ```ruby
                        t=on.current_timestep_time
                    ```

                `#### Description:


                    Returns the time of the current timestep.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`current_timestep=` (Exchange only)

                `#### Syntax:

                    ```ruby
                        on.current_timestep=7
                    ```

                `#### Description:


                    This method sets the current timestep to the timestep with the index
                    given e.g. 0 sets the current timestep to the first timestep, -1 sets it
                    to the 'maximum' 'timestep'.
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###*csv\_export*

                `#### Syntax:

                    ```ruby
                        on.csv_export(filename,options)
                    ```

                `#### Description:


                    Exports the WSOpenNetwork to the file specified

                    The options object must be a nil or a hash contain some or all of the
                    following fields

                    |                          |                                                                                                                                     |        |
                    |--------------------------|-------------------------------------------------------------------------------------------------------------------------------------|--------|
                    | Use Display Precision    | If true, uses the display precision, otherwise outputs the number with more digits                                                  | True   |
                    | Field Descriptions       | If true, outputs a line of field descriptions (for the information of anyone reading the file)                                      | False  |
                    | Field Names              | If true, outputs a header line with the field names – these are used when files are reimported                                      | True   |
                    | Flag Fields              | If true, the flag fields are exported                                                                                               | True   |
                    | Multiple Files           | If true, the version control object is exported to multiple files, one for each network object type                                 | False  |
                    | Native System Types      | If true, the internal names for system types are used                                                                               | False  |
                    | User Units               | If true, the user selected units rather than the internal ones (SI) are used                                                        | True   |
                    | Object Types             | If true, the type of each object exported is exported in a separate column                                                          | False  |
                    | Selection Only           | If true, only the selected objects are exported                                                                                     | False  |
                    | Units Text               | If true, a line containing the units for each field is exported                                                                     | False  |
                    | Coordinate Arrays Format | The mechanism whereby arrays of coordinates (e.g. polylines and polygons) are exported. Choices are 'None', 'Packed' and 'Unpacked' | Packed |
                    | Other Arrays Format      | The mechanism whereby other arrays (e.g. shapes / demand diagrams) are exported. Choices are 'None', 'Packed' and 'Separate'        | Packed |

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`csv_import`

                `#### Syntax:

                    ```ruby
                        nno.csv_import(filename,options)
                    ```

                `#### Description:


                    Updates the WSOpenNetwork from the CSV file specified.

                    The options parameter must be nil, or a hash which can contain any or all of the following.

                    [](May want to convert this to a table using HTML table)

                    |        Option        | Description                                                                                                                                                           |       |
                    |----------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------|
                    | Force Link Rename    | If nodes are renamed, then associated objects have the node renamed                                                                                                   | True  |
                    | Flag Genuine Only    | Only genuine changes to the field are flagged                                                                                                                         | False |
                    | Load Null Fields     | If the field in an object to be updated is not blank and the field in the CSV file is blank, then if this is set to true, the data will be updated otherwise it won't | True  |
                    | Update With Any Flag | If this is set to true, then any field can be updated, if it is set to false then only fields with the flag set to the 'update flag' will be updated                  | True  |
                    | Use Asset ID         | Use the asset ID as the key for updates rather than the normal 'primary key'                                                                                          | False |
                    | User Units           | Use the current 'user units' rather than the native (SI) units                                                                                                        | True  |
                    | Action               | Action to perform: `Update Only – will only update existing objects`Update And Add – will update and add objects, but not perform deletions`Mixed – will add, update and delete objects depending on an 'action' field in the CSV file</br>Delete – will delete objects  | Mixed |
                    | Header               | What header the importer will expect in the file(s):`ID – ID only`ID Description – Ids on one line, followed by descriptions on the next.`ID Units – Ids on one line, followed by units on the next`ID Descriptions Units – Ids on one line, followed by descriptions on the next, followed by units on the 3rd  |  ID   |
                    | New Flag             | Flag used for new / updated fields                                                                                                                                    | Blank |
                    | Update Flag          | Flag used to determine what objects are updated if the 'Update With Any Flag' field is set to false                                                                   | Blank |

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`current_scenario`

                `#### Syntax:

                    ```ruby
                        puts on.current_scenario
                    ```

                `#### Description:


                    Returns the WSOpenNetwork object's current scenario as a string.

                    If the current scenario is the base scenario, returns 'Base' (in
                    English).

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`current_scenario=`

                `#### Syntax:

                    ```ruby
                        on.current_scenario=new_scenario
                    ```

                `#### Description:


                    Sets the WSOpenNetwork's current scenario. The new value should be a
                    string or can be nil in which case the current scenario is set to the
                    base scenario. The new scenario must exist.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`delete_scenario`

                `#### Syntax:

                    ```ruby
                        on.delete_scenario(scenario_name)
                    ```

                `#### Example:

                    ```rb
                        on.delete_scenario('myScenario')
                    ```

                `#### Description:

                    Deletes the scenario specified in the string parameter. If the specified
                    scenario is the current scenario, the current scenario is set to be the
                    base scenario.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`delete_selection`

                `#### Syntax:

                    ```ruby
                        on.delete_selection
                    ```

                `#### Description:


                    Deletes the current selection from the network in the current scenario.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`each`

                `#### Syntax:

                    ```ruby
                        on.each do |x|
                    ```

                `#### Description:


                    Iterates through all the objects in the WSOpenNetwork e.g.

                    on.each do |x|

                    puts x.id

                    end

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`each_selected`

                `#### Syntax:

                    ```ruby
                        on.each_selected do |x|
                    ```

                `#### Description:


                    As each but iterates through the selected objects only.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`export_IDs`

                `#### Syntax:

                    ```ruby
                        on.export_IDs(filename,parameters)
                    ```

                `#### Description:


                    Exports the IDs of all the objects or the current selection to a file,
                    grouped by table.

                    The parameters must be nil or a hash. If the parameters are a hash then
                    there are two possible values:

                    Selection Only – if set to true only the IDs of the current selection
                    will be exported (default false i.e. all exported)

                    UTF8 – if set to true the file will be UTF8 encoded (default false i.e.
                    current locals)

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`field_names(type)`

                `#### Syntax:

                    ```ruby
                        arr=on.field_names(type)
                    ```

                `#### Example:

                    ```rb
                        arr=on.field_names('hw_node')
                        arr.each do |f|
                            puts f
                        end
                    ```

                `#### Description:

                    Given the internal name of a type, returns a list of names of the fields
                    for that object type – the object type cannot be a class.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`gauge_timestep_count`

                `#### Syntax:

                    ```ruby
                        n=on.gauge_timestep_count
                    ```

                `#### Description:


                    This method returns the number of gauge timesteps. If there are no gauge
                    timesteps, either because no objects are 'gauged' or because the gauge
                    timestep for the run was set to 0 it returns 0.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`gauge_timestep_time`

                `#### Syntax:

                    ```ruby
                        t=on.gauge_timestep_time(timestep_no)
                    ```

                `#### Description:


                    This method returns the time for the gague timestep with the index given
                    as the method's parameter.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`GIS_export`

                `#### Syntax:

                    ```ruby
                        on.GIS_export(format,params,location)
                    ```

                `#### Description:


                    Exports the network data to GIS.

                    See the method of the same name for WSNumbatNetworkObject for an
                    explanation of the parameters.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`list_gauge_timesteps`

                `#### Syntax:

                    ```ruby
                        arr=on.list_gauge_timesteps
                    ```

                `#### Description:


                    This method returns an array containing the times of all the gauge
                    timesteps for the sim in order.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`list_GIS_export_tables`

                `#### Syntax:

                    ```ruby
                        arr=on.list_GIS_export_tables
                    ```

                `#### Description:


                    This method lists the tables that will be exported to GIS as an array of
                    strings. This method is designed to return information useful when
                    customising the parameters to GIS\_export.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`list_timesteps`

                `#### Syntax:

                    ```ruby
                        arr=on.list_timesteps
                    ```

                `#### Description:


                    This method returns an array containing the times of all the timesteps
                    for the sim in order.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`load_selection`

                `#### Syntax:

                    ```ruby
                        no.load_selection(selection_list)
                    ```

                `#### Description:


                    Selects objects based on the selection list object. The parameter may be
                    a WSModelObject, an object path or the numerical ID of the model object
                    – providing in all cases that the model object is a selection list.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`new_row_object`

                `#### Syntax:

                    ```ruby
                        ro=on.new_row_object(type)
                    ```

                `#### Example:

                    ```rb
                        ro=no.new_row_object('hw_node')
                    ```

                `#### Description:

                    This method creates a new row object in the network. This must be done
                    within a transaction.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`objects_in_polygon`

                `#### Syntax:

                    ```ruby
                        vec=on.objects_in_polygon(polygon,type_or_types)
                    ```

                `#### Description:


                    Returns a Ruby array of objects in a polygon. This is essentially the
                    same as the WSRowObject version except the polygon is passed in as the
                    first parmeter. The purpose of this method is to allow the polygon to be
                    in one network and the objects found to be in another e.g. the current
                    network and the background network.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`odic_import_ex`

                `#### Syntax:

                    ```ruby
                        vec=on.odic_import_ex(format,config_file,params,…)
                    ```

                `#### Description:


                    As for WSNumbatNetworkObject above except that it returns an array of
                    WSRowObject objects, one for each object created or updated by the
                    import (this would not be possible in the WSNumbatNetworkObject version,
                    since the network is not left open after the method, and WSRowObject
                    objects may not be open when their network is not).

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`odec_export_ex`

                `#### Syntax:

                    ```ruby
                        on.odec_export_ex(format,config_file,params,…)
                    ```

                `#### Description:


                    As for WSNumbatNetworkObject above.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`row_object`

                `#### Syntax:

                    ```ruby
                        ro=on.row_object(table,id)
                    ```

                `#### Example:

                    ```rb
                        ro=on.row_object('hw_node','MH111111')
                    ```

                `#### Description:

                    Given a table name and an ID (with the parts separated by . if it is a
                    type with multiple key fields) returns a WSRowObject or derived class.
                    Returns nil if there is no such object in the network.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`row_objects`

                `#### Syntax:

                    ```ruby
                        arr=on.row_objects(table)
                    ```

                `#### Example:

                    ```rb
                        vec=on.row_objects('hw_node')
                    ```

                `#### Description:

                    Given a table name returns a vector of WSRowObject (possibly including
                    instances of derived classes). Returns a vector of zero length if there
                    are no objects of that type in the network.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`row_objects_from_asset_id`

                `#### Syntax:

                    ```ruby
                        arr=on.row_objects_from_asset_id(type,asset_id)
                    ```

                `#### Description:


                    Given an asset ID and a type returns a vector of WSRowObject (possibly
                    including instances of derived classes) with that asset ID. Returns a
                    vector of zero length if there are no objects of that type in the
                    network.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`row_object_collection`

                `#### Syntax:

                    ```ruby
                        roc=on.row_object_collection(type)
                    ```

                `#### Description:


                    Given a type returns a WSRowObjectCollection (see below) representing a
                    collection of objects in the network which can be iterated through. The
                    parameter can be the type or class of the object, or nil in which case
                    all objects will be returned.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`row_object_collection_selection`

                `#### Syntax:

                    ```ruby
                        roc=on.row_object_collection_selection(type)
                    ```

                `#### Description:


                    As row\_object\_collection above, but only returns objects currently
                    selected in the WSOpenNetwork.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`run_inference`

                `#### Syntax:

                    ```ruby
                        on.run_inference(inference,ground_model, mode, zone_or_zone_category, error_file)
                    ```

                `#### Description:


                    Runs the inference object on the network, which must be a collection
                    asset network or a distribution asset network.

                    The parameters are as follows:

                    Inference – the inference to be run –may be a WSModelObject, an object
                    path or the numerical ID of the model object. This must be of the
                    appropriate inference object type for the network.

                    Ground\_model – optional ground model (used for inferring heigh). May be
                    a WSModelObject, an object path or the numerical ID of the model object.
                    The WSModelObject or path may be of a TIN ground model or a grid ground
                    model, the numerical ID may only be that of a grid ground model i.e. to
                    use a TIN ground model you must use a WSModelObject or path.

                    Mode – the mode of the inference, corresponding to the options on the
                    dialog shown when inference is run in the user interface. The permitted
                    values are as follows:

                    -   nil, false or the string 'Network' – run the inference on the whole
                        network

                    -   true or the string 'Selection' – run the inference on the current
                        selection (which, of course, must be set up within the script)

                    -   the string 'Zone' – run the inference for the zone specified in the
                        following parameter.

                    -   The string 'Category' – run the inference for zones with the zone
                        specified in the following parameter.

                    Zone\_or\_zone\_category – a string representing the zone or zone
                    category. This parameter is only used if the previous parameter is
                    'Zone' or 'Category'.

                    Error\_file – if this is a string, then error messages are written to
                    the file named (which is deleted prior to the method being run)

                    When run within the UI, the ground model parameter must be nil. If there
                    is a ground model loaded into the network (either TIN or grid), it will
                    be used instead.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`run_SQL`

                `#### Syntax:

                    ```ruby
                        on.run_SQL(table,query)
                    ```

                `#### Description:


                    This method runs the SQL query with the given table being the 'current
                    table' as it appears in the SQL dialog i.e. the default table if the SQL
                    query does not further qualify the table name.

                    The names '\_nodes' or '\_links' can be used to run the SQL over all
                    node or link tables in the same way as can be achieved by selecting 'All
                    nodes' or 'All links' in the dropdowns in the SQL dialog.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`run_stored_query_object`

                `#### Syntax:

                    ```ruby
                        on.run_stored_query_object(stored_query_object)
                    ```

                `#### Description:


                    Runs a stored query object. The parameter is the stored query object to
                    be run–may be a WSModelObject, an object path or the numerical ID of the
                    model object.

                    From version 6.5, when run from the UI, spatial queries and those with
                    UI may be run from the UI. This was not the case with previous versions
                    and is not the case when they are run from the Exchange products.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`save_selection`

                `#### Syntax:

                    ```ruby
                        on.save_selection(selection_list)
                    ```

                `#### Description:


                    Saves the current selection (in the current scenario) to an already
                    existing selection list model object. The parameter may be a
                    WSModelObject, an object path or the numerical ID of the model object –
                    providing in all cases that the model object is a selection list.

                    e.g.

                    ```ruby
                        mosl=db.model_object_from_type_and_id 'Selection List',14
                        mosl2=db.model_object_from_type_and_id 'Selection List',15
                        on.save_selection mosl.path
                        on.save_selection mosl2
                        on.save_selection 16
                    ```

                    e.g.

                    ```rb
                        on.save_selection mySelectionList.path
                    ```

                    Saves the current selection to the already existing selection list.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`scenarios`

                `#### Syntax:

                    ```ruby
                        on.scenarios do |s|
                            #Process scenarios...
                        end
                    ```

                `#### Example:

                    ```rb
                        on.scenarios do |scenario|
                            on.current_scenario = scenario
                            #analyse scenario
                        end
                    ```

                `#### Description:

                    This method provides a block of names of scenarios to be iterated
                    through. The base scenario is included in the results as the string
                    'Base', in English.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`search_at_point(x,y,distance,types)`

                `#### Syntax:

                    ```ruby
                        roc=find_at_point(x,y,distance,types)
                    ```

                `#### Description:


                    Finds the objects within a distance of a given point, returning a vector
                    of WSRowObject. Types may be nil (in which case all tables are
                    searched), a string or an array of strings, these strings may be the
                    name of a type or a category. It may not contain duplicates, and may not
                    contain a category and a table within that category.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`selection_size`

                `#### Syntax:

                    ```ruby
                        n=on.selection_size
                    ```

                `#### Description:


                    Returns the number of objects selected.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`snapshot_import`

                `#### Syntax:

                    ```ruby
                        on.snapshot_import(filename)
                    ```

                `#### Description:


                    Imports a snapshot file into the network from the given filename. This
                    has the same effect as calling snapshot\_import\_ex with the second
                    parameter being nil.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`snapshot_import_ex`

                `#### Syntax:

                    ```ruby
                        on.snapshot_import_ex(filename,parameters_hash)
                    ```

                `#### Description:


                    Imports a snapshot file into the network from the given filename. The
                    second parameter must be a hash from strings to values as shown below or
                    nil. If it is nil then the defaults will be used.

                    Valid keys for the hash are as follows:

                    Tables – Array of strings - If present, a list of the internal table
                    names (as returned by the table\_names method of this class) If not
                    present then all tables will be exported.

                    AllowDeletes - Boolean

                    ImportGeoPlanPropertiesAndThemes - Boolean

                    UpdateExistingObjectsFoundByID - Boolean

                    UpdateExistingObjectsFoundByUID – Boolean

                    ImportImageFiles - Boolean

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`snapshot_export`

                `#### Syntax:

                    ```ruby
                        on.snapshot_export(filename)
                    ```

                `#### Description:


                    Exports a snapshot of the network to the given filename.`
                    `
                    All objects are exported from all tables, but image files and GeoPlan
                    properties and themes are not exported.`
                    `
                    The method `snapshot_export_ex` allows more flexibility over what is
                    exported.`
                    `
                    Snapshots cannot be exported from networks with uncommitted changes.`
        `
        `
                    `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`snapshot_export_ex`

                `#### Syntax:

                    ```ruby
                        on.snapshot_ex(filename,parameters_hash)
                    ```

                `#### Description:


                    Exports a snapshot of the network to the given filename. The second
                    parameter must either be nil or a hash from strings to values as
                    follows:

                    > SelectedOnly – (Boolean). If present and true, only the currently
                    > selected objects are exported, otherwise by default all objects of the
                    > appropriate tables are exported.
                    >
                    > IncludeImageFiles – (Boolean).If present and true, includes the data
                    > for image files in the network, otherwise by default images are not
                    > exported.
                    >
                    > IncludeGeoPlanPropertiesAndThemes – (Boolean) If present and true,
                    > includes the data for GeoPlan properties and themes, otherwise by
                    > default they are not exported
                    >
                    > ChangesFromVersion – (integer) If present, the snapshot will be of the
                    > different from the network's version with this commit ID, otherwise by
                    > default the current version of the network will be exported.
                    >
                    > Tables – (array of strings) If present, a list of the internal table
                    > names (as returned by the `table_names` method of this class) If not
                    > present then all tables will be exported.

                    The SelectedOnlyOptions must not be mixed with the Tables option or the
                    ChangesFromVersion option.`
                    `
                    Any other keys for the hash are treated as an error and an exception
                    raised.`
                    `
                    If the second parameter is nil then the default are used i.e. all
                    objects from all tables are exported but image files and GeoPlan
                    properties and themes are not, yielding the same result as calling
                    snapshot\_export.`
                    `
                    Snapshots cannot be exported from networks with uncommitted changes.`
        `
        `
                    `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`snapshot_scan`

                `#### Syntax:

                    ```ruby
                        details_hash=on.snapshot_scan(filename)
                    ```

                `#### Description:


                    Given a snapshot file, this method scans it and returns a hash
                    containing the details as follows. The keys are all strings.

                    > NetworkGUID – string – the GUID of the network from which the snapshot
                    > was exported.
                    >
                    > CommitGUID – string – the GUID of the commit of the network from which
                    > the snapshot was exported.
                    >
                    > CommitID – integer – the ID of the commit of the network from which
                    > the snapshot was exported.
                    >
                    > NetworkTypeCode – string – the type of network from which the snapshot
                    > was exported. This matches the name of the network type e.g.
                    > 'Collection Network'
                    >
                    > DatabaseGUID – string – the GUID associated with the database version
                    > from which the snapshot was exported.
                    >
                    > DatabaseSubVersion – integer – the 'subversion' associated with the
                    > database version from which the snapshot was exported.
                    >
                    > UnknownTableCount – integer – the number of tables in the snapshot not
                    > recognised by the software, this will only be greater than 0 if the
                    > snapshot were exported from a more recent version of the software.
                    >
                    > FileCount – integer –the number of image files contained within the
                    > snapshot.
                    >
                    > ContainsGeoPlanPropertiesAndThemes – Boolean – true if the snapshot
                    > was exported with the option to included GeoPlan properties and
                    > themes.
                    >
                    > Tables – hash – a hash containing information about the tables
                    > exported as described below.

                    The Tables hash is a hash from the table names (strings) to a hash
                    containing information about each table.

                    The hash of information about each table is as follows. The keys are all
                    strings and the values are all integers.

                    ObjectCount – the number of objects in the snapshot for the table.

                    > ObjectsWithOldVersionsCount -
                    >
                    > ObjectsFoundByUID -
                    >
                    > ObjectsFoundByID -
                    >
                    > DeleteRecordsCount -

                    UnknownFieldCount –the number of unknown fields for the table, this will
                    be zero unless the export is from a more recent version of the software
                    than the user is using to import the data.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`table_names`

                `#### Syntax:

                    ```ruby
                        arr=on.table_names
                    ```

                `#### Example:

                    ```rb
                        on.table_names.each do |n|
                            puts n
                        end
                    ```

                `#### Description:

                    This method returns an array of the tables names for the WSOpenNetwork –
                    these are the internal names.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`table`

                `#### Syntax:

                    ```ruby
                        t=on.table(name)
                    ```

                `#### Description:


                    Given a table name, this method returns a WSTableInfo object for that
                    table.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`tables`

                `#### Syntax:

                    ```ruby
                        arr=on.tables
                    ```

                `#### Description:


                    This method returns an array of WSTableInfo objects for the
                    WSOpenNetwork.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`timestep_count`

                `#### Syntax:

                    ```ruby
                        n=on.timestep_count
                    ```

                `#### Description:


                    This method returns the number of timesteps in the results for the sim,
                    it does not include the 'maximum' 'timestep' so for sims without any
                    time varying results this method will return 0.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`timestep_time`

                `#### Syntax:

                    ```ruby
                        t=on.timestep_time(timestep_no)
                    ```

                `#### Description:


                    This method returns the time for the timestep with the index given as
                    the method's parameter.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`transaction_begin`

                `#### Syntax:

                    ```ruby
                        on.transaction_begin
                    ```

                `#### Description:


                    Changes to objects in the network should in general be included within
                    transactions. A transaction begins with transaction\_begin, then may be
                    ended either with transaction\_commit, which commits the changes since
                    transaction\_begin, or with transaction\_rollback, which cancels the
                    changes since transaction\_begin

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`transaction_commit`

                `#### Syntax:

                    ```ruby
                        on.transaction_commit
                    ```

                `#### Description:


                    Commits the transaction – see above.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`transaction_rollback`

                `#### Syntax:

                    ```ruby
                        on.transaction_end
                    ```

                `#### Description:


                    Ends the transaction – see above.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`update_cctv_scores`

                `#### Syntax:

                    ```ruby
                        on.update_cctv_scores
                    ```

                `#### Description:


                    Calculates CCTV scores for all surveys in the network using the current
                    standard.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`validate`

                `#### Syntax:

                    ```ruby
                        v=on.validate(scenarios)
                    ```

                `#### Description:


                    This method validates the scenario or scenarios given in the parameter,
                    returning a WSValidations object.

                    The parameter may be nil, in which case the Base scenario is validated,
                    a string in which case the named scenario (which may be 'Base') will be
                    validated, or an array of strings, in which case all the named scenarios
                    (which may include 'Base') will be validated.



        ## WSRowObject

            The WSRowObject class is instantiated from various methods within the Ruby API.
            Each row object instantiated contains a copy of the data for the specific row
            it was instantiated from. It is important to note that the fields in this object
            ARE NOT POINTERS to the database fields. These are by-value copies of the field's
            data. To make changes to the database fields the `write` method must be called.
            When the `write` method is called, ICM will loop over all fields in the `WSRowObject`
            instance and write them to the database. As a byproduct of this behaviour each
            object you pull from the database obtains the current data from the database,
            for example:

            ```ruby
                net = WSApplication.current_network
                #Get the first object
                net.each do |obj|
                    obj.notes = "hello world"
                    newObj = net.row_object_by_type_and_id(obj.table_info.name,obj.id)
                    puts newObj.notes #=> NOT "hello world"
                    break
                end
            ```

            Fields prefixed with `_` will not be written to the database when calling
            the write method. E.G.

            ```ruby
                net = WSApplication.current_network
                net.transaction_begin
                    net.each do |obj|
                    obj.user_text_10 = "Written to database"
                    obj._user_text_10 = "Not written to the database"
                    obj.write
                    end
                net.transaction_commit
            ```

            Typically most ruby interpreters signify this as an 'unused' variable, however,
            in ICM, you can use it to temporarily store information which you may not want to
            write to the database.

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`[]`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`[]=`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`missing_method`

                `#### Syntax:

                    ```ruby
                        ro['field']=value
                    ```

                `#### Description:


                    **v=ro\['field'\]**

                    **ro.field\_name = value**

                    **v=ro.field\_name**

                    **ro\['\_tag'\]=value**

                    **v=ro\['\_tag'\]**

                    **ro.\_tag = value**

                    **v=ro.\_tag**

                    The above are used to set and get values of fields for WSRowObject
                    objects as described in the 'getting and setting values' section above.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`category`

                `#### Syntax:

                    ```ruby
                        s=ro.category
                    ```

                `#### Description:


                    Returns the category name (as described above) of the object's table as
                    a string.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`contains?`

                `#### Syntax:

                    ```ruby
                        b=ro.contains?(ro2)
                    ```

                `#### Description:


                    Returns true if polygon ro contains the object ro2.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`delete`

                `#### Syntax:

                    ```ruby
                        ro.delete
                    ```

                `#### Description:


                    Deletes the row object.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`field`

                `#### Syntax:

                    ```ruby
                        f=ro.field(fieldname)
                    ```

                `#### Description:


                    Returns the WSFieldInfo object associated with the named field in the
                    WSRowObject's table. This returns information about the named field,
                    which does not depend on the actual WSRowObject or its value for the
                    field – it is essentially a short cut to getting the table and then
                    getting the field info from that.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`gauge_results`

                `#### Syntax:

                    ```ruby
                        arr=ro.gauge_results(results_field_name)
                    ```

                `#### Description:


                    Returns an array of the results for the given results field name for the
                    object at all gauge timesteps – the field must have time varying
                    results. If the object or field does not have gauge results it will
                    return the 'normal' results.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`id`

                `#### Syntax:

                    ```ruby
                        id=ro.id
                    ```

                `#### Description:


                    Returns the ID of the object as a string. If the object has a multi-part
                    primary key, then the key will be output with part separated by the '.'
                    character.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`id=`

                `#### Syntax:

                    ```ruby
                        ro.id=newid
                    ```

                `#### Description:


                    Updates the ID of the row object.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`is_inside?`

                `#### Syntax:

                    ```ruby
                        B=ro.is_inside?(ro2)
                    ```

                `#### Description:


                    Returns true if ro2 is inside the polygon ro2.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`navigate`

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`navigate1`

                `#### Syntax:

                    ```ruby
                        vec=ro.navigate(navigation_type)
                    ```

                `#### Description:


                    **ro2=ro.navigate(navigation\_type)**

                    The navigate and navigate1 methods are used to navigate between objects
                    and other objects to which they are physically related.

                    The navigate method may be used to navigate using one-to-one and
                    one-to-many links and returns an array of WSRowObject objects. The
                    navigate1 method may only be used to navigate using one-to-one links and
                    returns a WSRowObject or nil if there is no object related to the object
                    by that particular navigation type.

                    The navigation types are the same as those used within the SQL in the
                    software as follows:

                    | joined                        | No  |
                    |-------------------------------|-----|
                    | us\_node                      | No  |
                    | ds\_node                      | No  |
                    | custom                        | No  |
                    | node                          | No  |
                    | lateral\_pipe                 | No  |
                    | pipe                          | No  |
                    | us\_links                     | No  |
                    | ds\_links                     | No  |
                    | sanitary\_manhole             | No  |
                    | storm\_manhole                | No  |
                    | sanitary\_pipe                | No  |
                    | storm\_pipe                   | No  |
                    | property                      | No  |
                    | data\_logger                  | No  |
                    | smoke\_test                   | No  |
                    | drain\_tests                  | Yes |
                    | manhole\_surveys              | Yes |
                    | manhole\_repairs              | Yes |
                    | gps\_surveys                  | Yes |
                    | incidents                     | Yes |
                    | monitoring\_surveys           | Yes |
                    | pipe\_repairs                 | Yes |
                    | smoke\_tests                  | Yes |
                    | dye\_tests                    | Yes |
                    | cctv\_surveys                 | Yes |
                    | properties                    | Yes |
                    | smoke\_defects                | Yes |
                    | pipe\_samples                 | Yes |
                    | joined\_pipes                 | Yes |
                    | pipe\_cleans                  | Yes |
                    | maintenance\_records          | Yes |
                    | hydrant\_tests                | Yes |
                    | meter\_tests                  | Yes |
                    | meters                        | Yes |
                    | all\_us\_links                | No  |
                    | all\_ds\_links                | No  |
                    | general\_maintenance\_records | Yes |
                    | tasks                         | No  |
                    | resources                     | No  |
                    | manhole                       | No  |
                    | valve                         | No  |
                    | hydrant                       | No  |
                    | meter                         | No  |
                    | materials                     | No  |
                    | orders                        | No  |
                    | connection\_pipe              | No  |
                    | asset\_name\_groups           | No  |
                    | asset                         | No  |
                    | leak\_detections              | No  |
                    | general\_surveys              | No  |
                    | fog\_inspections              | No  |

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`objects_in_polygon`

                `#### Syntax:

                    ```ruby
                        vec=ro.objects_in_polygon(type_or_types)
                    ```

                `#### Description:


                    Returns a vector of the objects in the polygon (from the same network).
                    The type or types parameter may be nil (in which case all tables are
                    searched), a string or an array of strings, these strings may be the
                    name of a type or a category. It may not contain duplicates, and may not
                    contain a category and a table within that category. This is the same as
                    the similar parameter in the WSNumbatNetworkObject's search\_at\_point
                    method.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`result`

                `#### Syntax:

                    ```ruby
                        f=ro.result(result_fields_name)
                    ```

                `#### Description:


                    Returns the result for the given results field name for the object at
                    the current timestep.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`results`

                `#### Syntax:

                    ```ruby
                        arr=ro.results(result_field_name)
                    ```

                `#### Description:


                    Returns an array of the results for the given results field name for the
                    object at all timesteps – the field must have time varying results.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`selected?`

                `#### Syntax:

                    ```ruby
                        b=ro.selected?
                    ```

                `#### Description:


                    returns True if the object is currently selected, False otherwise

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`selected=`

                `#### Syntax:

                    ```ruby
                        ro.selected=b
                    ```

                `#### Example:

                    ```rb
                        ro.selected=true
                    ```

                `#### Description:

                    ro2.selected=false

                    If the value on the right of the = evaluates to true, the object is
                    selected, otherwise it is deselected.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`table`

                `#### Syntax:

                    ```ruby
                        s=ro.table
                    ```

                `#### Description:


                    Returns the internal name of the object's table as a string.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`table_info`

                `#### Syntax:

                    ```ruby
                        ti=ro.table_info
                    ```

                `#### Description:


                    Returns the WSTableInfo object for the object's table, this may be used
                    to get the list of fields for the object.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`write`

                `#### Syntax:

                    ```ruby
                        ro.write
                    ```

                `#### Description:


                    After changing field values it is necessary to call the write method,
                    otherwise the changes will not take effect.



        ## WSNode

            This class is derived from the WSRowObject class, and represents objects
            of 'category' node as described above. It has two extra methods:

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`us_links`

                `#### Syntax:

                    ```ruby
                        roc=node.us_links
                    ```

                `#### Description:


                    Returns a WSRowObjectCollection (see below) representing all the
                    upstream links of the node. If there are no upstream links a collection
                    of length zero is returned.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`ds_links`

                `#### Syntax:

                    ```ruby
                        roc=node.ds_links
                    ```

                `#### Description:


                    Returns a WSRowObjectCollection (see below) representing all the
                    downstream links of the node. If there are no upstream links a
                    collection of length zero is returned.



        ## WSLink

            This class is derived from the WSRowObject class, and represents objects
            of 'category' link as described above. It has two extra methods:

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`us_node`

                `#### Syntax:

                    ```ruby
                        ro=link.us_node
                    ```

                `#### Description:


                    Returns a WSRowObject representing the link's upstream node, or nil if
                    it doesn't have one.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`ds_node`

                `#### Syntax:

                    ```ruby
                        ro=link.ds_node
                    ```

                `#### Description:


                    Returns a WSRowObject representing the link's downstream node, or nil if
                    it doesn't have one.



        ## WSRiskAnalysisRunObject

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`run`

                `#### Syntax:

                    ```ruby
                        raro.run
                    ```

                `#### Description:


                    Performs the risk analysis run.



        ## WSRowObjectCollection

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`length`

                `#### Syntax:

                    ```ruby
                        n=roc.length
                    ```

                `#### Description:


                    Returns the number of WSRowObjects in the collection

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`[]`

                `#### Syntax:

                    ```ruby
                        ro=roc[n]
                    ```

                `#### Description:


                    Returns the nth WSRowObject in the collection. The index is 0 based i.e.
                    valid values are from 0 to length-1.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`each`

                `#### Syntax:

                    ```ruby
                        roc.each {|ro|}
                    ```

                `#### Description:


                    Allows the user to iterate through all objects in the collection e.g.

                    my\_network.row\_object\_collection('\_nodes').each do |ro|

                    puts ro.id

                    end



        ## WSTableInfo

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`description`

                `#### Syntax:

                    ```ruby
                        s=ti.description
                    ```

                `#### Description:


                    returns the description of the table.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`fields`

                `#### Syntax:

                    ```ruby
                        arr=ti.fields
                    ```

                `#### Description:


                    returns an array of the fields for this table – the fields are of type
                    WSFieldInfo

                    - flags are treated as separate fields.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`name`

                `#### Syntax:

                    ```ruby
                        s=ti.name
                    ```

                `#### Description:


                    returns the internal name of the table.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`results_fields`

                `#### Syntax:

                    ```ruby
                        arr=ti.results_fields
                    ```

                `#### Description:


                    Returns an array of results fields as instances of the WSFieldInfo
                    class.

                    Note that the fields returned and the values of their
                    has\_time\_varying\_results? and has\_max\_results? methods reflects the
                    results of the specific simulation run you are looking at the results
                    of, the details of which can vary considerably depending on the options
                    selected when performing the run. This is different from the fields
                    method which returns the fields for the network which do not on the
                    whole change for a network type for a particular release of the
                    software, except for user defined fields and tables in InfoNet.
		[/method]


        ## WSFieldInfo
        `
        `
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`data_type`

                `#### Syntax:

                    ```ruby
                        s=fi.data_type
                    ```

                `#### Description:


                    Returns the data type of the field as a string. The method is named
                    'data\_type' to distinguish it from the Ruby type. The data types are
                    described in InfoWorks terms, not Ruby data types. The types are as
                    follows:

                    * `Flag`
                    * `Boolean`
                    * `Single`
                    * `Double`
                    * `Short`
                    * `Long`
                    * `Date`
                    * `String`
                    * `Array:Long`
                    * `Array:Double`
                    * `WSStructure`
                    * `GUID`

                    Flag fields have their type returned as 'Flag', their underlying Ruby
                    type is `String`.

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`description`

                `#### Syntax:

                    ```ruby
                        s=fi.description
                    ```

                `#### Description:


                    returns the description of the table

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`fields`

                `#### Syntax:

                    ```ruby
                        arr=fi.fields
                    ```

                `#### Description:


                    returns an array of fields if the field is itself a 'structure blob'. If
                    the field is not a structure blob, this method returns nil.

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`has_time_varying_results?`

                `#### Syntax:

                    ```ruby
                        b=fi.has_time_varying_results?
                    ```

                `#### Description:


                    This method returns true if the field has time varying results i.e.
                    results for the timesteps in the simulation. It will return false for
                    network fields. Please see the WSTableInfo results\_fields method for
                    more discussion.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`has_max_results?`

                `#### Syntax:

                    ```ruby
                        b=fi.has_max_results?
                    ```

                `#### Description:


                    This method returns true if the field has a maximum / summary result
                    i.e. if it has a maximum / summary result displayed when the simulation
                    is open in the UI and the timestep control is set to the 'maximum'
                    'timestep'. It will return false for network fields. Please see the
                    WSTableInfo results\_fields method for more discussion.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`name`

                `#### Syntax:

                    ```ruby
                        s=fi.name
                    ```

                `#### Description:


                    returns the name of the field

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`read_only?`

                `#### Syntax:

                    ```ruby
                        bReadOnly=fi.read_only?
                    ```

                `#### Description:


                    Returns true if the field is read only, false if it isn't

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="7.0"]

            ###`size`

                `#### Syntax:

                    ```ruby
                        n=fi.size
                    ```

                `#### Description:
                    Returns 4 if the field is a flag field, the length of a string field for
                    string fields or 0 otherwise.
		`
		`
		[/method]
		`
		`
        ## WSCommit
		`
		`
        The methods of this class are all read only and each of them returns the
        value in one of the fields that appears in the commit grid as follows:

		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
            ### `branch_id`
                `#### Description:
                    Returns the Branch ID of this particular model network version.
		[/method]
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
		    ### `comment`
                `#### Description:
                    Returns the comments/notes of this particular model network version.
		[/method]
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
	           ### `commit_id`
	               `#### Description:
	                   Returns the Commit ID of this particular model network version.`
	                   `
	                   It should be noted that, in ICM version 8.0 you are not able to get the network object itself, thusyou cannot open and compare 2 different models. However there is currently a work around, whichinvolves exporting a commit and re-importing the commit to a new model, ultimately making the changesrequired:`
	                   `

	                   ```ruby
	                       net.snapshot_export_ex "some/snapshot/path", {"ChangesFromVersion"=>commitID}
	                       newNet.snapshot_import "some/snapshot/path"
	                       #use newNet, to find and make changes required
	                   ```
		[/method]
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
        	### `date`
            	`#### Description:
                	Returns the date of this particular model network version.
		[/method]
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
        	### `deleted_count`
            	`#### Description:
                	Returns the number of objects deleted in this particular model network version.
		[/method]
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
        	### `inserted_count`
            	`#### Description:
                	Returns the number of objects added in this particular model network version.
		[/method]
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
	           ### `modified_count`
	               `#### Description:
	                   Returns the number of objects modified in this particular model network version.
		[/method]
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
	           ### `setting_changed_count`
	               `#### Description:
	                   Returns the number of settings which have been modified in this particular model network version.
		[/method]
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
	           ### `user`
			    `#### Description:
					Returns the user that last modified the network
		[/method]
		`
		`
        ## WSCommits
		`
		`
        The WSCommits is a collection of WSCommit objects.
		`
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
	        ### `[]`
				`#### Description:
					Returns the WSCommit object with the specified index.
		[/method]
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
			### `each`
				`#### Syntax:
					```ruby
						commits.each do |commit|
							puts commit.commit_id
						end
					```
				`#### Description:
					When supplied a block ruby will loop over each WSCommit object in the array
		[/method]
		[method exchange=true ui=true documentation="official" icmVersion="1.6.6"]
			### `length`
				`#### Description:
					Returns the number of WSCommit objects in the collection
		[/method]

        ## WSStructure
        `
        `
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`each`

                `#### Syntax:

                    ```ruby
                        sb.each {|v|}
                    ```

                `#### Description:


                    Iterates through the collection.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`length`

                `#### Syntax:

                    ```ruby
                        n=sb.length
                    ```

                `#### Description:

                    Returns the number of WSStructureRow objects in the WSStructure
                    collection

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`length=`

                `#### Syntax:

                    ```ruby
                        sb.length=n
                    ```

                `#### Description:


                    Sets the number of WSStructureRow objects in the WSStructure collection

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`size`

                `#### Syntax:

                    ```ruby
                        n=sb.size
                    ```

                `#### Description:


                    Returns the number of WSStructureRow objects in the WSStructure
                    collection (synonym for length)

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`size=`

                `#### Syntax:

                    ```ruby
                        sb.size=n
                    ```

                `#### Description:

                    Sets the number of WSStructureRow objects in the WSStructure collection
                    (synonym for length)

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`write`

                `#### Syntax:

                    ```ruby
                        sb.write
                    ```

                `#### Description:

                    Causes the changes to the WSStructure, i.e. changes to its length, data
                    in any new rows, and changes to data in existing rows to be 'written
                    back' to the WSRowObject. If this is not called then changes to the
                    WSStructure will not take effect.`
					`
                    Once any changes to the structure blob have been written back to the
                    WSRowObject, the WSRowObject must be written to the database with its
                    write method (and then, of course, the transaction must be committed and
                    the network written to the database with the commit method or in the
                    user interface!).

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`[]`

                `#### Syntax:

                    ```ruby
                        v=sb[n]
                    ```

                `#### Description:

                    Returns the nth WSStructureRow object in the collection (zero based).
		`
		`
		[/method]

        ## WSStructureRow

            `
            `

        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`[]`

                `#### Syntax:

                    ```ruby
                        v=row[val]
                    ```

                `#### Description:


                    Returns the value of the named field in the WSStructureRow object.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`[]=`

                `#### Syntax:

                    ```ruby
                        row[val]=v
                    ```

                `#### Description:


                    Sets the value of the named field in the WSStructureRow object.
		`
		`
		[/method]

        ## WSValidations

            `
            `

        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`error_count`

                `#### Syntax:

                    ```ruby
                        n=vals.error_count
                    ```

                `#### Description:


                    Returns the number of errors found when performing the validation.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`warning_count`

                `#### Syntax:

                    ```ruby
                        n=vals.warning_count
                    ```

                `#### Description:


                    Returns the number of warnings found when performing the validation.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`length`

                `#### Syntax:

                    ```ruby
                        n=vals.length
                    ```

                `#### Description:


                    Returns the number of WSValidation objects in the WSValidations
                    collection

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`each`

                `#### Syntax:

                    ```ruby
                        n.each {|v|}
                    ```

                `#### Description:


                    Iterates through the collection.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`[]`

                `#### Syntax:

                    ```ruby
                        v=vals[n]
                    ```

                `#### Description:


                    Returns the nth WSValidation object in the collection (zero based).



        ## WSValidation

            The methods of this class are are all read only and each of them returns
            the value in one of the fields that appears in the validation windows
            when the network is validated within the user interface.

            `
            `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`code`

                `#### Syntax:

                    ```ruby
                        n=v.code
                    ```

                `#### Description:


                    Returns the code of the validation message.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`field`

                `#### Syntax:

                    ```ruby
                        s=v.field
                    ```

                `#### Description:


                    Returns the field from the validation message. This may not be a real
                    database field, but if it is then the internal name rather than the
                    description will be returned.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`field_description`

                `#### Syntax:

                    ```ruby
                        s=v.field_description
                    ```

                `#### Description:


                    Returns the field column from the validation message as it appears in
                    the validation window.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`object_id`

                `#### Syntax:

                    ```ruby
                        s=v.object_id
                    ```

                `#### Description:


                    Returns ID for the object in the validation message, if any.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`object_type`

                `#### Syntax:

                    ```ruby
                        s=v.object_type
                    ```

                `#### Description:


                    Returns the description from the object type column of the validation
                    message, if any.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`message`

                `#### Syntax:

                    ```ruby
                        s=v.object_message
                    ```

                `#### Description:


                    Returns the validation message.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`priority`

                `#### Syntax:

                    ```ruby
                        n=v.priority
                    ```

                `#### Description:


                    Returns the priority of the validation message.

        `
        `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`type`

                `#### Syntax:

                    ```ruby
                        n=v.type
                    ```

                `#### Description:


                    Returns the type of the validation message: 'error', 'warning' or
                    'information'.

        `
                    `
        [/method]
        [method exchange=true ui=true documentation="official" icmVersion="1.6.6"]

            ###`scenario`

                `#### Syntax:

                    ```ruby
                        s=v.scenario
                    ```

                `#### Description:


                    Returns the scenario name for the validation message – returns 'Base'
                    for the base scenario.
        [/method]
